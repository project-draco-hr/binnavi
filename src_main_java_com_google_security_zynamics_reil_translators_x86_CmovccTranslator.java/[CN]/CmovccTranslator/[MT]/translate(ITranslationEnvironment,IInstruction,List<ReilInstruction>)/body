{
  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");
  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");
  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");
  Preconditions.checkArgument(instruction.getOperands().size() == 2,"Error: Argument instruction is not a conditional move instruction (invalid number of operands)");
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final Pair<OperandSize,String> conditionResult=conditionGenerator.generate(environment,offset,instructions);
  final OperandSize conditionRegisterSize=conditionResult.first();
  final String conditionRegister=conditionResult.second();
  offset=baseOffset + instructions.size();
  final String flippedCondition=environment.getNextVariableString();
  instructions.add(ReilHelpers.createBisz(offset,conditionRegisterSize,conditionRegister,OperandSize.BYTE,flippedCondition));
  final ArrayList<ReilInstruction> movCode=new ArrayList<ReilInstruction>();
  Helpers.generateMov(environment,offset + 2,instruction,movCode);
  final long lastOffset=instructions.size() + movCode.size() + 1;
  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),lastOffset);
  instructions.add(ReilHelpers.createJcc(offset + 1,OperandSize.BYTE,flippedCondition,OperandSize.ADDRESS,jmpGoal));
  instructions.addAll(movCode);
  offset=baseOffset + instructions.size();
  instructions.add(ReilHelpers.createNop(offset));
}
