{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand4=instruction.getOperands().get(3).getRootNode().getChildren().get(0);
  final String targetRegister=(registerOperand1.getValue());
  final String sourceRegister1=(registerOperand2.getValue());
  final String sourceRegister2=(registerOperand3.getValue());
  final String sourceRegister3=(registerOperand4.getValue());
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  final OperandSize wd=OperandSize.WORD;
  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  final String operand2=environment.getNextVariableString();
  final String operand2from15to0=environment.getNextVariableString();
  final String operand2from31to16=environment.getNextVariableString();
  final String overflow1=environment.getNextVariableString();
  final String overflow2=environment.getNextVariableString();
  final String product1=environment.getNextVariableString();
  final String product2=environment.getNextVariableString();
  final String registerRm15to0=environment.getNextVariableString();
  final String registerRm31to16=environment.getNextVariableString();
  final String tmpAddResult1=environment.getNextVariableString();
  final String tmpResult1=environment.getNextVariableString();
  final String tmpRotate1=environment.getNextVariableString();
  final String tmpRotate2=environment.getNextVariableString();
  final String trueproduct1=environment.getNextVariableString();
  final String trueproduct2=environment.getNextVariableString();
  if (instruction.getMnemonic().contains("X")) {
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister2,bt,String.valueOf(-16),dw,tmpRotate1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister2,bt,String.valueOf(16),dw,tmpRotate2));
    instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpRotate1,dw,tmpRotate2,dw,operand2));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,operand2,dw,String.valueOf(0xFFFFFFFFL),dw,operand2));
  }
 else {
    instructions.add(ReilHelpers.createStr(baseOffset++,dw,sourceRegister2,dw,operand2));
  }
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,operand2,dw,String.valueOf(0xFFFFL),dw,operand2from15to0));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,operand2,dw,String.valueOf(-16L),dw,operand2from31to16));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,sourceRegister1,dw,String.valueOf(0xFFFFL),dw,registerRm15to0));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister1,dw,String.valueOf(-16L),dw,registerRm31to16));
  Helpers.signedMul(baseOffset,environment,instruction,instructions,wd,registerRm15to0,wd,operand2from15to0,dw,trueproduct1);
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  Helpers.signedMul(baseOffset,environment,instruction,instructions,wd,registerRm31to16,wd,operand2from31to16,dw,trueproduct2);
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,trueproduct1,dw,trueproduct2,qw,tmpAddResult1));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,sourceRegister3,qw,tmpAddResult1,qw,tmpResult1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpResult1,dw,String.valueOf(0xFFFFFFFFL),dw,targetRegister));
  Helpers.addOverflow(baseOffset,environment,instructions,dw,product1,dw,product2,qw,tmpAddResult1,overflow1,16);
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  Helpers.addOverflow(baseOffset,environment,instructions,dw,sourceRegister3,qw,tmpAddResult1,qw,tmpResult1,overflow2,16);
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  instructions.add(ReilHelpers.createOr(baseOffset++,bt,overflow1,bt,overflow2,bt,"Q"));
}
