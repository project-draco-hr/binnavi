{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"mfxer");
  final IOperandTreeNode targetRegister=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  Long baseOffset=instruction.getAddress().toLong() * 0x100;
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize dw=OperandSize.DWORD;
  final String tmpVar1=environment.getNextVariableString();
  instructions.add(ReilHelpers.createStr(baseOffset++,dw,String.valueOf(0x0L),dw,tmpVar1));
  instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.XER_SUMMARY_OVERFLOW,dw,tmpVar1,dw,tmpVar1));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,bt,String.valueOf(1L),dw,tmpVar1));
  instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.XER_OVERFLOW,dw,tmpVar1,dw,tmpVar1));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,bt,String.valueOf(1L),dw,tmpVar1));
  instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.XER_CARRY_BIT,dw,tmpVar1,dw,tmpVar1));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,bt,String.valueOf(29L),dw,tmpVar1));
  instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.XER_COUNT_REGISTER,dw,tmpVar1,dw,targetRegister.getValue()));
}
