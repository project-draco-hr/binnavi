{
  final MockDebugger debugger=new MockDebugger(new ModuleTargetSettings(CommonTestObjects.MODULE));
  debugger.connect();
  debugger.getProcessManager().setAttached(true);
  debugger.connection.m_synchronizer.receivedEvent(new TargetInformationReply(0,0,new TargetInformation(32,new FilledList<RegisterDescription>(),new DebuggerOptions(false,false,false,true,false,false,false,false,false,false,1,0,new ArrayList<DebuggerException>(),false,false,false))));
  final MemorySection section1=new MemorySection(new CAddress(0x100),new CAddress(0x1FF));
  final MemorySection section2=new MemorySection(new CAddress(0x300),new CAddress(0x3FF));
  final MemoryMap memoryMap=new MemoryMap(Lists.newArrayList(section1,section2));
  debugger.connection.m_synchronizer.receivedEvent(new MemoryMapReply(0,0,memoryMap));
  final TargetProcessThread thread=new TargetProcessThread(1,ThreadState.RUNNING);
  m_model.setActiveDebugger(debugger);
  debugger.getProcessManager().setActiveThread(null);
  assertFalse(m_sectionBox.isEnabled());
  debugger.getProcessManager().addThread(thread);
  assertFalse(m_sectionBox.isEnabled());
  debugger.getProcessManager().setActiveThread(thread);
  assertTrue(m_sectionBox.isEnabled());
  debugger.getProcessManager().setActiveThread(null);
  assertFalse(m_sectionBox.isEnabled());
  debugger.getProcessManager().removeThread(thread);
  assertFalse(m_sectionBox.isEnabled());
  debugger.getProcessManager().setAttached(false);
  m_synchronizer.dispose();
  debugger.close();
}
