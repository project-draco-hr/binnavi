{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,mnemonic);
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final String targetRegister=registerOperand1.getValue();
  final String dividend=registerOperand2.getValue();
  final String divisor=registerOperand3.getValue();
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize wd=OperandSize.WORD;
  final OperandSize bt=OperandSize.BYTE;
  final String crTemp=setCr ? environment.getNextVariableString() : null;
  final String zeroCheck=environment.getNextVariableString();
  final String overflowTmp1=setOv && isSigned ? environment.getNextVariableString() : null;
  final String overflowTmp2=setOv && isSigned ? environment.getNextVariableString() : null;
  final String overflowTmp3=setOv && isSigned ? environment.getNextVariableString() : null;
  final String overflowTmp4=setOv && isSigned ? environment.getNextVariableString() : null;
  final String overflowTmp5=setOv && isSigned ? environment.getNextVariableString() : null;
  final String overflowTmp6=setOv && isSigned ? environment.getNextVariableString() : null;
  final String dividendMSB=isSigned ? environment.getNextVariableString() : null;
  final String divisorMSB=isSigned ? environment.getNextVariableString() : null;
  final String newMSB=isSigned ? environment.getNextVariableString() : null;
  final String tmpResult=isSigned ? environment.getNextVariableString() : null;
  instructions.add(ReilHelpers.createBisz(baseOffset++,dw,divisor,dw,zeroCheck));
  if (isSigned) {
    final String firstComplementVar2=environment.getNextVariableString();
    final String secondComplementVar2=environment.getNextVariableString();
    final String finalComplement=environment.getNextVariableString();
    final String finalFirstComplement=environment.getNextVariableString();
    final String finalSecondComplement=environment.getNextVariableString();
    final String firstOneComplement=environment.getNextVariableString();
    final String firstTwoComplement=environment.getNextVariableString();
    final String secondOneComplement=environment.getNextVariableString();
    final String secondTwoComplement=environment.getNextVariableString();
    final String shiftedTmpResult=environment.getNextVariableString();
    final String allOnes=environment.getNextVariableString();
    final String resultOneComplement=environment.getNextVariableString();
    final String allOnesCheck=environment.getNextVariableString();
    instructions.add(ReilHelpers.createXor(baseOffset++,dw,divisor,dw,String.valueOf(0xFFFFFFFFL),dw,allOnes));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,allOnes,dw,allOnesCheck));
    instructions.add(ReilHelpers.createOr(baseOffset++,dw,zeroCheck,dw,allOnesCheck,dw,zeroCheck));
    instructions.add(ReilHelpers.createJcc(baseOffset++,dw,zeroCheck,dw,String.format("%d.%d",instruction.getAddress().toLong(),23)));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,dividend,bt,String.valueOf(-31L),bt,dividendMSB));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,divisor,bt,String.valueOf(-31L),bt,divisorMSB));
    instructions.add(ReilHelpers.createBisz(baseOffset++,bt,dividendMSB,bt,firstComplementVar2));
    instructions.add(ReilHelpers.createBisz(baseOffset++,bt,divisorMSB,bt,secondComplementVar2));
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,String.valueOf(0xFFFFFFFFL),bt,firstComplementVar2,dw,finalFirstComplement));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,finalFirstComplement,dw,String.valueOf(0xFFFFFFFFL),dw,finalFirstComplement));
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,String.valueOf(0xFFFFFFFFL),bt,secondComplementVar2,dw,finalSecondComplement));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,finalSecondComplement,dw,String.valueOf(0xFFFFFFFFL),dw,finalSecondComplement));
    instructions.add(ReilHelpers.createXor(baseOffset++,bt,dividendMSB,bt,divisorMSB,bt,newMSB));
    instructions.add(ReilHelpers.createXor(baseOffset++,dw,finalFirstComplement,dw,finalSecondComplement,dw,finalComplement));
    instructions.add(ReilHelpers.createXor(baseOffset++,dw,dividend,dw,finalFirstComplement,dw,firstOneComplement));
    instructions.add(ReilHelpers.createXor(baseOffset++,dw,divisor,dw,finalSecondComplement,dw,secondOneComplement));
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,firstOneComplement,bt,dividendMSB,dw,firstTwoComplement));
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,secondOneComplement,bt,divisorMSB,dw,secondTwoComplement));
    instructions.add(ReilHelpers.createDiv(baseOffset++,dw,firstTwoComplement,dw,secondTwoComplement,dw,tmpResult));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpResult,dw,String.valueOf(0xFFFFFFFFL),dw,shiftedTmpResult));
    instructions.add(ReilHelpers.createXor(baseOffset++,dw,shiftedTmpResult,dw,finalComplement,dw,resultOneComplement));
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,resultOneComplement,bt,newMSB,dw,tmpResult));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpResult,dw,String.valueOf(0xFFFFFFFFL),dw,targetRegister));
  }
 else {
    instructions.add(ReilHelpers.createJcc(baseOffset++,dw,zeroCheck,dw,String.format("%d.%d",instruction.getAddress().toLong(),3)));
    instructions.add(ReilHelpers.createDiv(baseOffset++,dw,dividend,dw,divisor,dw,targetRegister));
  }
  if (setOv) {
    if (isSigned) {
      instructions.add(ReilHelpers.createBisz(baseOffset++,dw,divisor,dw,overflowTmp1));
      instructions.add(ReilHelpers.createXor(baseOffset++,dw,divisor,dw,String.valueOf(0xFFFFFFFFL),dw,overflowTmp2));
      instructions.add(ReilHelpers.createBisz(baseOffset++,dw,overflowTmp2,dw,overflowTmp3));
      instructions.add(ReilHelpers.createXor(baseOffset++,dw,dividend,dw,String.valueOf(0x80000000L),dw,overflowTmp4));
      instructions.add(ReilHelpers.createBisz(baseOffset++,dw,overflowTmp4,dw,overflowTmp5));
      instructions.add(ReilHelpers.createAnd(baseOffset++,dw,overflowTmp3,dw,overflowTmp5,dw,overflowTmp6));
      instructions.add(ReilHelpers.createOr(baseOffset++,dw,overflowTmp1,dw,overflowTmp6,bt,Helpers.XER_OVERFLOW));
      instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.XER_OVERFLOW,bt,Helpers.XER_SUMMARY_OVERFLOW,bt,Helpers.XER_SUMMARY_OVERFLOW));
    }
 else {
      instructions.add(ReilHelpers.createBisz(baseOffset++,dw,divisor,bt,Helpers.XER_OVERFLOW));
      instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.XER_OVERFLOW,bt,Helpers.XER_SUMMARY_OVERFLOW,bt,Helpers.XER_SUMMARY_OVERFLOW));
    }
  }
  if (setCr) {
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,targetRegister,bt,Helpers.CR0_EQUAL));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,targetRegister,wd,"-31",bt,Helpers.CR0_LESS_THEN));
    instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.CR0_EQUAL,bt,Helpers.CR0_LESS_THEN,bt,crTemp));
    instructions.add(ReilHelpers.createBisz(baseOffset++,bt,crTemp,bt,Helpers.CR0_GREATER_THEN));
    instructions.add(ReilHelpers.createStr(baseOffset,bt,Helpers.XER_SUMMARY_OVERFLOW,bt,Helpers.CRO_SUMMARY_OVERFLOW));
  }
}
