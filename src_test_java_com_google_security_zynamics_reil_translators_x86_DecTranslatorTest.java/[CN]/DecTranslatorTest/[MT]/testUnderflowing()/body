{
  interpreter.setRegister("CF",BigInteger.ZERO,OperandSize.BYTE,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("eax",BigInteger.valueOf(0x80000000),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"eax"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1);
  final IInstruction instruction=new MockInstruction("dec",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100));
  assertEquals(6,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  assertEquals(BigInteger.valueOf(0x7FFFFFFF),interpreter.getVariableValue("eax"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CF"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("OF"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("SF"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("ZF"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
}
