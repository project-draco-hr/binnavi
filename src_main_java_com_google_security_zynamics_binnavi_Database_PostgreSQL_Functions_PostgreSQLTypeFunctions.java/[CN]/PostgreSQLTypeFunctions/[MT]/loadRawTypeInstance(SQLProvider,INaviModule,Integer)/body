{
  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");
  Preconditions.checkNotNull(module,"Error: module argument can not be null");
  Preconditions.checkNotNull(typeInstanceId,"Error: typeInstanceId argument can not be null");
  final String query=" SELECT * FROM load_type_instance(?, ?) ";
  try {
    final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
    statement.setInt(1,module.getConfiguration().getId());
    statement.setInt(2,typeInstanceId);
    final ResultSet resultSet=statement.executeQuery();
    try {
      while (resultSet.next()) {
        if (resultSet.first()) {
          final int moduleId=resultSet.getInt("module_id");
          final int id=resultSet.getInt("id");
          final String name=resultSet.getString("name");
          final int commentId=resultSet.getInt("comment_id");
          final int typeId=resultSet.getInt("type_id");
          final int sectionId=resultSet.getInt("section_id");
          final long sectionOffset=resultSet.getLong("section_offset");
          return new RawTypeInstance(moduleId,id,name,commentId,typeId,sectionId,sectionOffset);
        }
      }
    }
  finally {
      resultSet.close();
      statement.close();
    }
  }
 catch (  final SQLException exception) {
    throw new CouldntLoadDataException(exception);
  }
  throw new CouldntLoadDataException("Error: could not load singe type instance from the database.");
}
