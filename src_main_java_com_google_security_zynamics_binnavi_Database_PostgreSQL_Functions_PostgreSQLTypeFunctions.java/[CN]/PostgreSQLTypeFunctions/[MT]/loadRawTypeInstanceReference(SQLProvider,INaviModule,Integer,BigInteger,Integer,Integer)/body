{
  Preconditions.checkNotNull(provider,"Error: provider argument can not be null");
  Preconditions.checkNotNull(module,"Error: module argument can not be null");
  Preconditions.checkNotNull(typeInstanceId,"Error: typeInstanceId argument can not be null");
  Preconditions.checkNotNull(address,"Error: address argument can not be null");
  Preconditions.checkNotNull(position,"Error: position argument can not be null");
  Preconditions.checkNotNull(expressionId,"Error: expressionId argument can not be null");
  final String query=" SELECT * FROM load_expression_type_instance(?, ?, ?, ?, ?) ";
  try {
    final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query,ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_READ_ONLY);
    statement.setInt(1,module.getConfiguration().getId());
    statement.setInt(2,typeInstanceId);
    statement.setObject(3,address,Types.BIGINT);
    statement.setInt(4,position);
    statement.setInt(5,expressionId);
    final ResultSet resultSet=statement.executeQuery();
    try {
      while (resultSet.next()) {
        if (resultSet.isFirst()) {
          final int viewId=resultSet.getInt("view_id");
          final int moduleId=resultSet.getInt("module_id");
          return new RawTypeInstanceReference(moduleId,viewId,new CAddress(address),position,expressionId,typeInstanceId);
        }
      }
    }
  finally {
      resultSet.close();
      statement.close();
    }
  }
 catch (  final SQLException exception) {
    throw new CouldntLoadDataException(exception);
  }
  throw new CouldntLoadDataException("Error: could not load single cross reference from the database.");
}
