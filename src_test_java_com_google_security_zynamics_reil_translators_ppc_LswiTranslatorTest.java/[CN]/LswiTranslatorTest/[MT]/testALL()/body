{
  interpreter.setRegister("%r6",BigInteger.valueOf(0x0L),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("%r1",BigInteger.valueOf(1000),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setMemory(1000,0x12345678L,4);
  interpreter.setMemory(1004,0x87654321L,4);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"byte");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"%r6"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"byte");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"%r1"));
  final MockOperandTree operandTree3=new MockOperandTree();
  operandTree3.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"byte");
  operandTree3.root.m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,"6"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2,operandTree3);
  final IInstruction instruction=new MockInstruction("lswi",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100L));
  assertEquals(BigInteger.valueOf(1000),interpreter.getVariableValue("%r1"));
  assertEquals(BigInteger.valueOf(0x12345678L),interpreter.getVariableValue("%r6"));
  assertEquals(BigInteger.valueOf(0x87650000L),interpreter.getVariableValue("%r7"));
  assertEquals(BigInteger.valueOf(8L),BigInteger.valueOf(interpreter.getMemorySize()));
  assertEquals(4,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
}
