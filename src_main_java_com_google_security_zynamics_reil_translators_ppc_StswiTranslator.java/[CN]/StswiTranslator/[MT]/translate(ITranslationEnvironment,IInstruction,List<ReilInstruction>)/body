{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"stswi");
  final IOperandTreeNode countRegister=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode addressRegister=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode numBytes=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  int n=numBytes.getValue() == "0" ? 32 : Integer.decode(numBytes.getValue());
  final OperandSize dw=OperandSize.DWORD;
  final String effectiveAddress=environment.getNextVariableString();
  final String tmpData=environment.getNextVariableString();
  Long baseOffset=instruction.getAddress().toLong() * 0x100;
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,addressRegister.getValue(),dw,String.valueOf(0xFFFFFFFFL),dw,effectiveAddress));
  int r=Helpers.getRegisterIndex(countRegister.getValue()) - 1;
  while (n > 0) {
    r=(r + 1) % 32;
    if (n == 3) {
      instructions.add(ReilHelpers.createAnd(baseOffset++,dw,Helpers.getRealRegisterName("r" + r),dw,String.valueOf(0xFFFFFF00L),dw,tmpData));
    }
 else     if (n == 2) {
      instructions.add(ReilHelpers.createAnd(baseOffset++,dw,Helpers.getRealRegisterName("r" + r),dw,String.valueOf(0xFFFF0000L),dw,tmpData));
    }
 else     if (n == 1) {
      instructions.add(ReilHelpers.createAnd(baseOffset++,dw,Helpers.getRealRegisterName("r" + r),dw,String.valueOf(0xFF000000L),dw,tmpData));
    }
 else {
      instructions.add(ReilHelpers.createStr(baseOffset++,dw,Helpers.getRealRegisterName("r" + r),dw,tmpData));
      instructions.add(ReilHelpers.createAdd(baseOffset++,dw,effectiveAddress,dw,String.valueOf(4L),dw,effectiveAddress));
    }
    instructions.add(ReilHelpers.createStm(baseOffset++,dw,tmpData,dw,effectiveAddress));
    n-=4;
  }
}
