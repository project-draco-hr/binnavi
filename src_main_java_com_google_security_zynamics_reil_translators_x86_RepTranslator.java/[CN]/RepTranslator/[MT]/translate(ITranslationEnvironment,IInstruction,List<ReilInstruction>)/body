{
  final long baseOffset=ReilHelpers.toReilAddress(instruction.getAddress()).toLong();
  final long offset=baseOffset;
  final OperandSize archSize=environment.getArchitectureSize();
  final String invertedEcx=environment.getNextVariableString();
  final List<ReilInstruction> innerInstructions=new ArrayList<ReilInstruction>();
  translator.generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong() + 2,operandSize,innerInstructions);
  final String firstInstruction=String.format("%d.0",instruction.getAddress().toLong());
  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),innerInstructions.size() + 5);
  instructions.add(ReilHelpers.createBisz(offset,archSize,"ecx",OperandSize.BYTE,invertedEcx));
  instructions.add(ReilHelpers.createJcc(offset + 1,OperandSize.BYTE,invertedEcx,OperandSize.ADDRESS,jmpGoal));
  instructions.addAll(innerInstructions);
  final String decrementedEcx=environment.getNextVariableString();
  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(OperandSize.DWORD));
  instructions.add(ReilHelpers.createSub(baseOffset + instructions.size(),OperandSize.DWORD,"ecx",OperandSize.DWORD,"1",OperandSize.QWORD,decrementedEcx));
  instructions.add(ReilHelpers.createAnd(baseOffset + instructions.size(),OperandSize.QWORD,decrementedEcx,OperandSize.DWORD,truncateMask,OperandSize.DWORD,"ecx"));
  instructions.add(ReilHelpers.createJcc(baseOffset + instructions.size(),OperandSize.DWORD,"1",OperandSize.ADDRESS,firstInstruction));
  instructions.add(ReilHelpers.createNop(baseOffset + instructions.size()));
}
