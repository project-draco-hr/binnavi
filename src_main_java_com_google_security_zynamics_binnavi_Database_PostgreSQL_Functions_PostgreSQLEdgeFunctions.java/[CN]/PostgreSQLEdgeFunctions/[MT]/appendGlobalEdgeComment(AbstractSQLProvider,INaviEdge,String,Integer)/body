{
  Preconditions.checkNotNull(provider,"IE00482: provider argument can not be null");
  Preconditions.checkNotNull(edge,"IE00483: edge argument can not be null");
  Preconditions.checkNotNull(commentText,"IE00484: commentText argument can not be null");
  Preconditions.checkNotNull(userId,"IE00485: userId argument can not be null");
  final Connection connection=provider.getConnection().getConnection();
  final String function="{ ? = call append_global_edge_comment(?, ?, ?, ?, ?, ?) }";
  try {
    final int sourceModuleId=getModuleId(edge.getSource());
    final int destinationModuleId=getModuleId(edge.getTarget());
    final IAddress sourceAddress=CViewNodeHelpers.getAddress(edge.getSource());
    final IAddress destinationAddress=CViewNodeHelpers.getAddress(edge.getTarget());
    try {
      final CallableStatement appendCommentFunction=connection.prepareCall(function);
      try {
        appendCommentFunction.registerOutParameter(1,Types.INTEGER);
        appendCommentFunction.setInt(2,sourceModuleId);
        appendCommentFunction.setInt(3,destinationModuleId);
        appendCommentFunction.setObject(4,sourceAddress.toBigInteger(),Types.BIGINT);
        appendCommentFunction.setObject(5,destinationAddress.toBigInteger(),Types.BIGINT);
        appendCommentFunction.setInt(6,userId);
        appendCommentFunction.setString(7,commentText);
        appendCommentFunction.execute();
        final int commentId=appendCommentFunction.getInt(1);
        if (appendCommentFunction.wasNull()) {
          throw new CouldntSaveDataException("Error: Got an comment id of null from the database");
        }
        return commentId;
      }
  finally {
        appendCommentFunction.close();
      }
    }
 catch (    final SQLException exception) {
      throw new CouldntSaveDataException(exception);
    }
  }
 catch (  final MaybeNullException exception) {
    throw new CouldntSaveDataException(exception);
  }
}
