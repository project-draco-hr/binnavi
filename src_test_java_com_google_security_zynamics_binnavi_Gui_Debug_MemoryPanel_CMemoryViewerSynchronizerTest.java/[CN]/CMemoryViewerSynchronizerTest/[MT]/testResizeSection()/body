{
  m_debugger.connect();
  m_debugger.getProcessManager().setAttached(true);
  m_debugger.getProcessManager().setMemoryMap(new MemoryMap(Lists.newArrayList(new MemorySection(new CAddress(0x100),new CAddress(0x1FF)))));
  m_model.setActiveMemoryAddress(new CAddress(0x100),false);
  assertEquals(0x100,m_hexView.getCurrentOffset());
  assertEquals(0x100,m_hexView.getData().getDataLength());
  m_debugger.getProcessManager().setMemoryMap(new MemoryMap(Lists.newArrayList(new MemorySection(new CAddress(0x100),new CAddress(0x1FF)),new MemorySection(new CAddress(0x500),new CAddress(0x5FF)))));
  assertEquals(0x100,m_hexView.getCurrentOffset());
  assertEquals(0x100,m_hexView.getData().getDataLength());
  m_debugger.getProcessManager().setMemoryMap(new MemoryMap(Lists.newArrayList(new MemorySection(new CAddress(0x0),new CAddress(0x2FF)),new MemorySection(new CAddress(0x500),new CAddress(0x5FF)))));
  assertEquals(0x100,m_hexView.getCurrentOffset());
  assertEquals(0x300,m_hexView.getData().getDataLength());
  final MockMemoryViewerSynchronizerListener listener=new MockMemoryViewerSynchronizerListener();
  m_synchronizer.addListener(listener);
  m_debugger.getProcessManager().setMemoryMap(new MemoryMap(Lists.newArrayList(new MemorySection(new CAddress(0x0),new CAddress(0xFF)),new MemorySection(new CAddress(0x500),new CAddress(0x5FF)))));
  assertEquals(0x000,m_hexView.getCurrentOffset());
  assertEquals(0x100,m_hexView.getData().getDataLength());
  assertEquals("addressTurnedInvalid;",listener.events);
  m_synchronizer.removeListener(listener);
  m_debugger.getProcessManager().setAttached(false);
  m_synchronizer.dispose();
}
