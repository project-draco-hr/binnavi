{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"lwl");
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  final String lastTwoAddressBits=environment.getNextVariableString();
  final String shiftValue=environment.getNextVariableString();
  final String memoryShiftAmount=environment.getNextVariableString();
  final String registerMaskShiftAmount=environment.getNextVariableString();
  final String shiftedMemoryContent=environment.getNextVariableString();
  final String shiftedMemoryMask=environment.getNextVariableString();
  final String maskedRegisterContent=environment.getNextVariableString();
  final String temporaryResult=environment.getNextVariableString();
  final String memoryContent=environment.getNextVariableString();
  final String address=environment.getNextVariableString();
  final IOperandTreeNode targetRegister=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final long baseOffset=ReilHelpers.toReilAddress(instruction.getAddress()).toLong();
  long offset=baseOffset;
  final String extendedValue=SignExtendGenerator.extendAndAdd(offset,environment,instruction.getOperands().get(1),instructions);
  offset=baseOffset + instructions.size();
  instructions.add(ReilHelpers.createAnd(offset++,dw,extendedValue,dw,String.valueOf(0xFFFFFFFCL),dw,address));
  instructions.add(ReilHelpers.createLdm(offset++,dw,address,dw,memoryContent));
  instructions.add(ReilHelpers.createAnd(offset++,dw,extendedValue,dw,String.valueOf(3L),dw,lastTwoAddressBits));
  instructions.add(ReilHelpers.createBsh(offset++,dw,lastTwoAddressBits,dw,String.valueOf(3L),dw,shiftValue));
  final String endianess="little";
  if (endianess.equalsIgnoreCase("little")) {
    instructions.add(ReilHelpers.createSub(offset++,dw,String.valueOf(24L),dw,shiftValue,dw,memoryShiftAmount));
    instructions.add(ReilHelpers.createSub(offset++,dw,String.valueOf(-8L),dw,shiftValue,dw,registerMaskShiftAmount));
  }
 else   if (endianess.equalsIgnoreCase("big")) {
    instructions.add(ReilHelpers.createStr(offset++,dw,shiftValue,dw,memoryShiftAmount));
    instructions.add(ReilHelpers.createAdd(offset++,dw,String.valueOf(-32L),dw,shiftValue,dw,registerMaskShiftAmount));
  }
  instructions.add(ReilHelpers.createBsh(offset++,dw,memoryContent,dw,memoryShiftAmount,qw,shiftedMemoryContent));
  instructions.add(ReilHelpers.createBsh(offset++,dw,String.valueOf(0xFFFFFFFFL),dw,registerMaskShiftAmount,dw,shiftedMemoryMask));
  instructions.add(ReilHelpers.createAnd(offset++,dw,targetRegister.getValue(),dw,shiftedMemoryMask,dw,maskedRegisterContent));
  instructions.add(ReilHelpers.createOr(offset++,dw,maskedRegisterContent,qw,shiftedMemoryContent,qw,temporaryResult));
  instructions.add(ReilHelpers.createAnd(offset++,qw,temporaryResult,dw,String.valueOf(0xFFFFFFFFL),dw,targetRegister.getValue()));
}
