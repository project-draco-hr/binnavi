{
  interpreter.setRegister("%r0",BigInteger.ZERO,OperandSize.BYTE,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("%r1",BigInteger.ONE,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"%r0"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"%r1"));
  final MockOperandTree operandTree3=new MockOperandTree();
  operandTree3.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree3.root.m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,"32767"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2,operandTree3);
  final IInstruction instruction=new MockInstruction("subfic",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100L));
  assertEquals(BigInteger.valueOf(0x7FFEL),interpreter.getVariableValue("%r0"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("%r1"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR0LT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR0GT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR0EQ"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR0SO"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("XERCA"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("XERSO"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("XEROV"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
  assertEquals(10,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
}
