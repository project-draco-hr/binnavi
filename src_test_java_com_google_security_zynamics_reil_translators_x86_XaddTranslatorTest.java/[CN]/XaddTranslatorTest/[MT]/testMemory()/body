{
  interpreter.setRegister("CF",BigInteger.ZERO,OperandSize.BYTE,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("eax",BigInteger.valueOf(0x1000),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("ebx",BigInteger.valueOf(1),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setMemory(0x1000,0x123,4);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.MEMDEREF,"["));
  operandTree1.root.m_children.get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"eax"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,"ebx"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2);
  final IInstruction instruction=new MockInstruction("xadd",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100));
  assertEquals(7,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  assertEquals(BigInteger.valueOf(0x1000),interpreter.getVariableValue("eax"));
  assertEquals(BigInteger.valueOf(0x123),interpreter.getVariableValue("ebx"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CF"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("OF"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("SF"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("ZF"));
  assertEquals(0x124,interpreter.readMemoryWord(0x1000));
  assertEquals(BigInteger.valueOf(4L),BigInteger.valueOf(interpreter.getMemorySize()));
}
