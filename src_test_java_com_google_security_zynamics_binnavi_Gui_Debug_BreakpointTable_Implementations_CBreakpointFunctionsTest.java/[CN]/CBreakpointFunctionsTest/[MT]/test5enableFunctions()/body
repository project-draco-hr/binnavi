{
  final INaviModule mockModule=new MockModule();
  final DebugTargetSettings target=new ModuleTargetSettings(mockModule);
  final DebuggerProvider debuggerProvider=new DebuggerProvider(target);
  final MockDebugger debugger=new MockDebugger(new ModuleTargetSettings(mockModule));
  debugger.getBreakpointManager().addBreakpoints(BreakpointType.REGULAR,Sets.newHashSet(new BreakpointAddress(mockModule,new UnrelocatedAddress(new CAddress(0)))));
  final Breakpoint breakPoint=debugger.getBreakpointManager().getBreakpoint(BreakpointType.REGULAR,new BreakpointAddress(mockModule,new UnrelocatedAddress(new CAddress(0))));
  @SuppressWarnings("unused") final CAddress address=new CAddress(0);
  final BaseNode root=new BaseNode();
  final BreakpointCondition bpCondition=new BreakpointCondition("foo",root);
  breakPoint.setCondition(bpCondition);
  breakPoint.setDescription("purzel");
  debuggerProvider.addDebugger(debugger);
  @SuppressWarnings("unused") final CBreakpointTableModel tableModel=new CBreakpointTableModel(debuggerProvider);
  final int[] rows={0};
  assertFalse(CBreakpointFunctions.allDisabled(debuggerProvider,rows));
  CBreakpointRemoveFunctions.disableAll(debuggerProvider);
  assertTrue(CBreakpointFunctions.allDisabled(debuggerProvider,rows));
  CBreakpointSetFunctions.enableAll(debuggerProvider);
  assertFalse(CBreakpointFunctions.allDisabled(debuggerProvider,rows));
  CBreakpointRemoveFunctions.disableAll(debuggerProvider);
  assertTrue(CBreakpointFunctions.allDisabled(debuggerProvider,rows));
  CBreakpointSetFunctions.enableBreakpoints(debuggerProvider,rows);
  assertFalse(CBreakpointFunctions.allDisabled(debuggerProvider,rows));
}
