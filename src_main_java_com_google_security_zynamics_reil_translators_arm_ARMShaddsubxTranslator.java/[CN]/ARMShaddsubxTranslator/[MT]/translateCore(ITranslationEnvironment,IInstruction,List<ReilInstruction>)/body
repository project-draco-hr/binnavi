{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final String targetRegister=(registerOperand1.getValue());
  final String sourceRegister1=(registerOperand2.getValue());
  final String sourceRegister2=(registerOperand3.getValue());
  final long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();
  new Processor(){
    @Override protected int getResultShiftDelta(){
      return -1;
    }
    @Override protected String[] process(    final long offset,    final String[] firstTwo,    final String[] secondTwo){
      final String sum1=environment.getNextVariableString();
      final String diff1=environment.getNextVariableString();
      final String trueDiff1=environment.getNextVariableString();
      long baseOffset=offset - instructions.size();
      Helpers.signExtend(baseOffset + instructions.size(),environment,instruction,instructions,dw,firstTwo[0],dw,firstTwo[0],16);
      Helpers.signExtend(baseOffset + instructions.size(),environment,instruction,instructions,dw,firstTwo[1],dw,firstTwo[1],16);
      Helpers.signExtend(baseOffset + instructions.size(),environment,instruction,instructions,dw,secondTwo[0],dw,secondTwo[0],16);
      Helpers.signExtend(baseOffset + instructions.size(),environment,instruction,instructions,dw,secondTwo[1],dw,secondTwo[1],16);
      instructions.add(ReilHelpers.createAdd(baseOffset + instructions.size(),dw,firstTwo[1],dw,secondTwo[0],dw,sum1));
      Helpers.signedSub(baseOffset + instructions.size(),environment,instruction,instructions,secondTwo[1],firstTwo[0],diff1,trueDiff1);
      return new String[]{trueDiff1,sum1};
    }
  }
.generate(environment,baseOffset,16,sourceRegister1,sourceRegister2,targetRegister,instructions);
}
