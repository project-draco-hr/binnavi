{
  interpreter.setRegister("R0",BigInteger.valueOf(0x8060L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R1",BigInteger.valueOf(0x80B0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R2",BigInteger.valueOf(0x14L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R3",BigInteger.valueOf(0x2L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R4",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R5",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R6",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R7",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R8",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R9",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R10",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R11",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("C",BigInteger.ONE,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("N",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("Z",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("V",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("Q",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setMemory(0x8060L,0x1L,4);
  interpreter.setMemory(0x8064L,0x2L,4);
  interpreter.setMemory(0x8068L,0x3L,4);
  interpreter.setMemory(0x806CL,0x4L,4);
  interpreter.setMemory(0x8070L,0x5L,4);
  interpreter.setMemory(0x8074L,0x6L,4);
  interpreter.setMemory(0x8078L,0x7L,4);
  interpreter.setMemory(0x807CL,0x8L,4);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.OPERATOR,"!"));
  operandTree1.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R0"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.EXPRESSION_LIST,"{"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R4"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R5"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R6"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R7"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R8"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R9"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R10"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R11"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2);
  final IInstruction instruction=new MockInstruction("LDMIA",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100L));
  assertEquals(BigInteger.valueOf(0x8080L),interpreter.getVariableValue("R0"));
  assertEquals(BigInteger.valueOf(0x80B0L),interpreter.getVariableValue("R1"));
  assertEquals(BigInteger.valueOf(0x14L),interpreter.getVariableValue("R2"));
  assertEquals(BigInteger.valueOf(0x2L),interpreter.getVariableValue("R3"));
  assertEquals(BigInteger.valueOf(0x1L),interpreter.getVariableValue("R4"));
  assertEquals(BigInteger.valueOf(0x2L),interpreter.getVariableValue("R5"));
  assertEquals(BigInteger.valueOf(0x3L),interpreter.getVariableValue("R6"));
  assertEquals(BigInteger.valueOf(0x4L),interpreter.getVariableValue("R7"));
  assertEquals(BigInteger.valueOf(0x5L),interpreter.getVariableValue("R8"));
  assertEquals(BigInteger.valueOf(0x6L),interpreter.getVariableValue("R9"));
  assertEquals(BigInteger.valueOf(0x7L),interpreter.getVariableValue("R10"));
  assertEquals(BigInteger.valueOf(0x8L),interpreter.getVariableValue("R11"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("C"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("N"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("Z"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("V"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("Q"));
  assertEquals(BigInteger.valueOf(8 * 4),BigInteger.valueOf(interpreter.getMemorySize()));
  assertEquals(18,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
}
