{
  Preconditions.checkNotNull(graph,"Graph argument can not be null");
  final StringBuilder sb=new StringBuilder();
  sb.append("graph\n" + "[\n");
  int currentId=0;
  final Map<Object,Integer> nodeMap=new HashMap<>();
  final Stack<ITreeNode<?>> stack=new Stack<>();
  stack.push(graph.getRootNode());
  while (!stack.isEmpty()) {
    final ITreeNode<?> node=stack.pop();
    sb.append("\tnode\n" + "\t[\n" + "\tid ");
    sb.append(currentId);
    sb.append("\n" + "\tlabel \"" + "\"\n");
    sb.append(node);
    sb.append("\t]\n");
    nodeMap.put(node,currentId);
    ++currentId;
    final ITreeNode<?> parent=node.getParent();
    if (parent != null) {
      sb.append("\tedge\n" + "\t[\n" + "\tsource ");
      sb.append(nodeMap.get(parent));
      sb.append("\n" + "\ttarget ");
      sb.append(nodeMap.get(node));
      sb.append("\n" + "\tgraphics\n" + "\t[\n"+ "\t\tfill \"#000000\"\n"+ "\t\ttargetArrow \"standard\"\n"+ "\t]\n"+ "\t]\n");
    }
    for (    final ITreeNode<?> treeNode : node.getChildren()) {
      stack.push(treeNode);
    }
  }
  sb.append("]\n");
  return sb.toString();
}
