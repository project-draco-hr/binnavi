{
  final List<IComment> comments=functionNode.getLocalFunctionComment() == null ? new ArrayList<IComment>() : functionNode.getLocalFunctionComment();
  final IComment lastComment=comments.size() == 0 ? null : Iterables.getLast(comments);
  final String commentString=" TEST DELETE FUNCTION NODE COMMENT ";
  final IUser user=new UniqueTestUserGenerator(getProvider()).nextActiveUser();
  final int commentId=getProvider().appendFunctionNodeComment(functionNode,commentString,user.getUserId());
  final IComment newComment=new CComment(commentId,user,lastComment,commentString);
  final ArrayList<IComment> storedComments=getProvider().loadCommentById(commentId);
  assertNotNull(storedComments);
  assertEquals(comments.size() + 1,storedComments.size());
  assertEquals(newComment,storedComments.get(storedComments.size() - 1));
  getProvider().deleteFunctionNodeComment(functionNode,commentId,newComment.getUser().getUserId());
  final ArrayList<IComment> commentsAfterDelete=getProvider().loadCommentById(commentId);
  assertNotNull(commentsAfterDelete);
  assertTrue(commentsAfterDelete.isEmpty());
}
