{
  final String shifterOperand=environment.getNextVariableString();
  final String shifterCarryOut=environment.getNextVariableString();
  long baseOffset=offset;
  if (immediateNodeValue.equals("0")) {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,byteSize,"C",wordSize,thirtyOneSet,dWordSize,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,byteSize,"-" + String.valueOf(1),dWordSize,tmpVar2));
    instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,tmpVar1,dWordSize,tmpVar2,dWordSize,shifterOperand));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,registerNodeValue,byteSize,String.valueOf(1),byteSize,shifterCarryOut));
    return new Pair<String,String>(shifterOperand,shifterCarryOut);
  }
 else {
    final String tmpVar1=environment.getNextVariableString();
    final String tmpVar2=environment.getNextVariableString();
    final String tmpVar3=environment.getNextVariableString();
    final String tmpVar4=environment.getNextVariableString();
    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,"-" + Integer.decode(immediateNodeValue),dWordSize,tmpVar1));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,wordSize,String.valueOf((32 - Integer.decode(immediateNodeValue))),qWordSize,tmpVar2));
    instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,tmpVar1,qWordSize,tmpVar2,qWordSize,tmpVar3));
    instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar3,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,registerNodeValue,dWordSize,String.valueOf(-(Integer.decode(immediateNodeValue) - 1)),dWordSize,tmpVar4));
    instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar4,byteSize,String.valueOf(1),byteSize,shifterCarryOut));
    return new Pair<String,String>(shifterOperand,shifterCarryOut);
  }
}
