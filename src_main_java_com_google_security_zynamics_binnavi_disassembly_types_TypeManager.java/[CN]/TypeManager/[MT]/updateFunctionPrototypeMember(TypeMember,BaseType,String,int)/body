{
  Preconditions.checkNotNull(updatedMember,"Error: updated member argument can not be null.");
  Preconditions.checkArgument(updatedMember.getParentType().getCategory() == BaseTypeCategory.STRUCT,"Error: updated member argument must be a member of a struct base type.");
  Preconditions.checkNotNull(newMemberBaseType,"Error: new member base type argument can not be null.");
  Preconditions.checkNotNull(newMemberName,"Error: new member name argument can not be null.");
  Preconditions.checkArgument(!newMemberName.isEmpty(),"Error: new member name argument can not be empty.");
  Preconditions.checkArgument(newMemberArgumentIndex >= 0,"Error: new member argument index argument must be larger or equal to zero");
  backend.updateFunctionPrototypeMember(updatedMember,newMemberBaseType,newMemberName,newMemberArgumentIndex);
  final ImmutableSet<BaseType> affectedTypes=typesContainer.updateTypeMember(updatedMember,newMemberBaseType,newMemberName,updatedMember.getBitOffset(),updatedMember.getNumberOfElements(),Optional.of(newMemberArgumentIndex));
  notifyMemberUpdated(updatedMember,affectedTypes);
}
