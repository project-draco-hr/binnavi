{
  Preconditions.checkNotNull(updatedMember,"Error: updated member argument can not be null.");
  Preconditions.checkArgument(updatedMember.getParentType().getCategory() == BaseTypeCategory.STRUCT,"Error: updated member argument must be a member of a struct base type.");
  Preconditions.checkNotNull(newMemberBaseType,"Error: new member base type argument can not be null.");
  Preconditions.checkNotNull(newMemberName,"Error: new member name argument can not be null.");
  Preconditions.checkArgument(!newMemberName.isEmpty(),"Error: new member name argument can not be empty.");
  Preconditions.checkArgument(newMemberOffset >= 0,"Error: new member offset argument must be larger or equal to zero");
  final ImmutableMap<BaseType,Integer> originalTypeSizes=captureTypeSizesState(typesContainer.getAffectedTypes(updatedMember.getParentType()));
  final int memberSizeDelta=newMemberBaseType.getBitSize() - updatedMember.getBaseType().getBitSize();
  backend.updateStructureMember(updatedMember,newMemberBaseType,newMemberName,newMemberOffset);
  final ImmutableSet<BaseType> affectedTypes=typesContainer.updateTypeMember(updatedMember,newMemberBaseType,newMemberName,Optional.of(newMemberOffset),updatedMember.getNumberOfElements(),updatedMember.getArgumentIndex());
  notifyMemberUpdated(updatedMember,affectedTypes);
  for (  final TypeMember member : updatedMember.getParentType().getSubsequentMembers(updatedMember)) {
    backend.updateStructureMember(member,member.getBaseType(),member.getName(),member.getBitOffset().get() + memberSizeDelta);
  }
  ensureConsistencyAfterTypeUpdate(affectedTypes,Sets.newHashSet(affectedTypes),originalTypeSizes);
}
