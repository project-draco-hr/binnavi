{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final String targetRegister=(registerOperand1.getValue());
  final String sourceRegister1=(registerOperand2.getValue());
  final String sourceRegister2=(registerOperand3.getValue());
  final OperandSize wd=OperandSize.WORD;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  final String operand2=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String trueTmpResult=environment.getNextVariableString();
  final String tmpResult=environment.getNextVariableString();
  if (instruction.getMnemonic().contains("B")) {
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister2,dw,operand2,16);
  }
 else {
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister2,wd,String.valueOf(-16L),dw,tmpVar1));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar1,dw,operand2,16);
  }
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  Helpers.signedMul(baseOffset,environment,instruction,instructions,dw,sourceRegister1,dw,operand2,qw,tmpResult);
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  instructions.add(ReilHelpers.createBsh(baseOffset++,qw,trueTmpResult,wd,String.valueOf(-16L),qw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar2,dw,String.valueOf(0xFFFFFFFFL),dw,targetRegister));
}
