{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"rcl");
  if (instruction.getOperands().size() != 2) {
    throw new InternalTranslationException("Error: Argument instruction is not a rcl instruction (invalid number of operands)");
  }
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final List<? extends IOperandTree> operands=instruction.getOperands();
  final IOperandTree targetOperand=operands.get(0);
  final IOperandTree sourceOperand=operands.get(1);
  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);
  instructions.addAll(sourceResult.getInstructions());
  offset=baseOffset + instructions.size();
  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);
  instructions.addAll(targetResult.getInstructions());
  offset=baseOffset + instructions.size();
  final OperandSize sourceSize=sourceResult.getSize();
  final OperandSize targetSize=targetResult.getSize();
  final OperandSize resultSize=TranslationHelpers.getNextSize(targetSize);
  final String sourceRegister=sourceResult.getRegister();
  final String targetRegister=targetResult.getRegister();
  final String os=String.valueOf(targetSize.getBitSize());
  final String rotateMask=environment.getNextVariableString();
  final String rotateMaskZero=environment.getNextVariableString();
  final String rotateMaskLessOne=environment.getNextVariableString();
  final String rotateMaskOne=environment.getNextVariableString();
  final String shiftedCf=environment.getNextVariableString();
  final String realOp1=environment.getNextVariableString();
  final String shrValue=environment.getNextVariableString();
  final String shredResult=environment.getNextVariableString();
  final String shledResult=environment.getNextVariableString();
  final String result=environment.getNextVariableString();
  final String truncatedResult=environment.getNextVariableString();
  final String msbResult=environment.getNextVariableString();
  final String tempOf=environment.getNextVariableString();
  final String tempOfLsb=environment.getNextVariableString();
  final String carryMask=String.valueOf(Helpers.getCarryMask(targetSize));
  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(targetSize));
  final String maskSize=String.valueOf(TranslationHelpers.getAllBitsMask(targetSize));
  final String modVal=String.valueOf(targetSize.getBitSize() + 1);
  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(targetSize));
  final int linesBefore=instructions.size();
  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,sourceSize,os,OperandSize.BYTE,rotateMask));
  instructions.add(ReilHelpers.createBisz(offset + 1,OperandSize.BYTE,rotateMask,OperandSize.BYTE,rotateMaskZero));
  instructions.add(ReilHelpers.createSub(offset + 2,OperandSize.BYTE,rotateMask,OperandSize.BYTE,"1",OperandSize.BYTE,rotateMaskLessOne));
  instructions.add(ReilHelpers.createBisz(offset + 3,OperandSize.BYTE,rotateMaskLessOne,OperandSize.BYTE,rotateMaskOne));
  instructions.add(ReilHelpers.createBsh(offset + 4,OperandSize.BYTE,Helpers.CARRY_FLAG,sourceSize,os,resultSize,shiftedCf));
  instructions.add(ReilHelpers.createOr(offset + 5,targetSize,targetRegister,resultSize,shiftedCf,resultSize,realOp1));
  instructions.add(ReilHelpers.createBsh(offset + 6,resultSize,realOp1,OperandSize.BYTE,rotateMask,resultSize,shledResult));
  instructions.add(ReilHelpers.createAdd(offset + 7,OperandSize.BYTE,"-" + modVal,OperandSize.BYTE,rotateMask,OperandSize.BYTE,shrValue));
  instructions.add(ReilHelpers.createBsh(offset + 8,resultSize,realOp1,OperandSize.BYTE,shrValue,resultSize,shredResult));
  instructions.add(ReilHelpers.createOr(offset + 9,resultSize,shledResult,resultSize,shredResult,resultSize,result));
  instructions.add(ReilHelpers.createAnd(offset + 10,resultSize,result,targetSize,maskSize,targetSize,truncatedResult));
  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 20);
  instructions.add(ReilHelpers.createJcc(offset + 11,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal));
  instructions.add(ReilHelpers.createAnd(offset + 12,resultSize,result,resultSize,carryMask,resultSize,msbResult));
  instructions.add(ReilHelpers.createBsh(offset + 13,resultSize,msbResult,resultSize,"-" + os,OperandSize.BYTE,Helpers.CARRY_FLAG));
  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 17);
  instructions.add(ReilHelpers.createJcc(offset + 14,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal2));
  instructions.add(ReilHelpers.createUndef(offset + 15,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final String jmpGoal3=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 20);
  instructions.add(ReilHelpers.createJcc(offset + 16,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal3));
  instructions.add(ReilHelpers.createAnd(offset + 17,sourceSize,truncatedResult,sourceSize,msbMask,sourceSize,tempOf));
  instructions.add(ReilHelpers.createBsh(offset + 18,sourceSize,tempOf,sourceSize,shiftMsbLsb,OperandSize.BYTE,tempOfLsb));
  instructions.add(ReilHelpers.createBsh(offset + 19,OperandSize.BYTE,tempOfLsb,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.CARRY_FLAG));
  Helpers.writeBack(environment,offset + 20,targetOperand,truncatedResult,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);
}
