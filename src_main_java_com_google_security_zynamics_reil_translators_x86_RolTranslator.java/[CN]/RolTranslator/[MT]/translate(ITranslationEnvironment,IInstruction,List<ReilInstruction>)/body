{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"rol");
  if (instruction.getOperands().size() != 2) {
    throw new InternalTranslationException("Error: Argument instruction is not a rol instruction (invalid number of operand)");
  }
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final List<? extends IOperandTree> operands=instruction.getOperands();
  final IOperandTree targetOperand=operands.get(0);
  final IOperandTree sourceOperand=operands.get(1);
  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);
  instructions.addAll(sourceResult.getInstructions());
  offset=baseOffset + instructions.size();
  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);
  instructions.addAll(targetResult.getInstructions());
  offset=baseOffset + instructions.size();
  final OperandSize sourceSize=sourceResult.getSize();
  final OperandSize targetSize=targetResult.getSize();
  final String sourceRegister=sourceResult.getRegister();
  final String targetRegister=targetResult.getRegister();
  final String rotateMask=environment.getNextVariableString();
  final String rotateMaskZero=environment.getNextVariableString();
  final String rotateMaskLessOne=environment.getNextVariableString();
  final String rotateMaskOne=environment.getNextVariableString();
  final String shrValue=environment.getNextVariableString();
  final String shredResult=environment.getNextVariableString();
  final String shledResult=environment.getNextVariableString();
  final String result=environment.getNextVariableString();
  final String tempOf=environment.getNextVariableString();
  final String tempOfLsb=environment.getNextVariableString();
  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(targetSize));
  final String modVal=String.valueOf(targetSize.getBitSize());
  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(targetSize));
  final int linesBefore=instructions.size();
  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,targetSize,modVal,targetSize,rotateMask));
  instructions.add(ReilHelpers.createBisz(offset + 1,targetSize,rotateMask,OperandSize.BYTE,rotateMaskZero));
  instructions.add(ReilHelpers.createSub(offset + 2,targetSize,rotateMask,targetSize,"1",targetSize,rotateMaskLessOne));
  instructions.add(ReilHelpers.createBisz(offset + 3,targetSize,rotateMaskLessOne,OperandSize.BYTE,rotateMaskOne));
  instructions.add(ReilHelpers.createBsh(offset + 4,targetSize,targetRegister,OperandSize.BYTE,rotateMask,targetSize,shledResult));
  instructions.add(ReilHelpers.createAdd(offset + 5,OperandSize.BYTE,"-" + modVal,OperandSize.BYTE,rotateMask,OperandSize.BYTE,shrValue));
  instructions.add(ReilHelpers.createBsh(offset + 6,targetSize,targetRegister,OperandSize.BYTE,shrValue,targetSize,shredResult));
  instructions.add(ReilHelpers.createOr(offset + 7,targetSize,shledResult,targetSize,shredResult,targetSize,result));
  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 16);
  instructions.add(ReilHelpers.createJcc(offset + 8,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal));
  instructions.add(ReilHelpers.createAnd(offset + 9,targetSize,result,sourceSize,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));
  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 13);
  instructions.add(ReilHelpers.createJcc(offset + 10,OperandSize.BYTE,rotateMaskOne,OperandSize.ADDRESS,jmpGoal2));
  instructions.add(ReilHelpers.createUndef(offset + 11,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final String jmpGoal3=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 16);
  instructions.add(ReilHelpers.createJcc(offset + 12,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal3));
  instructions.add(ReilHelpers.createAnd(offset + 13,targetSize,result,targetSize,msbMask,sourceSize,tempOf));
  instructions.add(ReilHelpers.createBsh(offset + 14,targetSize,tempOf,targetSize,shiftMsbLsb,OperandSize.BYTE,tempOfLsb));
  instructions.add(ReilHelpers.createBsh(offset + 15,OperandSize.BYTE,tempOfLsb,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  Helpers.writeBack(environment,offset + 16,targetOperand,result,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);
}
