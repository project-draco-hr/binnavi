{
  interpreter.setRegister("AF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.UNDEFINED);
  interpreter.setRegister("CF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.UNDEFINED);
  interpreter.setRegister("OF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.UNDEFINED);
  interpreter.setRegister("PF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.UNDEFINED);
  interpreter.setRegister("SF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.UNDEFINED);
  interpreter.setRegister("ZF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.UNDEFINED);
  interpreter.setRegister("eax",BigInteger.valueOf(0xFFFF),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"eax"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,"3"));
  final IInstruction instruction=new MockInstruction("sar",Lists.newArrayList(operandTree1,operandTree2));
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100));
  System.out.println("registers: " + TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()));
  assertEquals(5,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  assertEquals(BigInteger.valueOf(0x1FFF),interpreter.getVariableValue("eax"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CF"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("ZF"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("SF"));
  assertFalse(interpreter.isDefined("AF"));
  assertFalse(interpreter.isDefined("OF"));
  assertTrue(interpreter.isDefined("CF"));
  assertTrue(interpreter.isDefined("SF"));
  assertTrue(interpreter.isDefined("ZF"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
}
