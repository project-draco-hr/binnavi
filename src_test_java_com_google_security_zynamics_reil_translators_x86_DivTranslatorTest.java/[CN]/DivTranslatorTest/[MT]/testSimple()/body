{
  interpreter.setRegister("AF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("CF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("OF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("PF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("SF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("ZF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("edx",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("eax",BigInteger.valueOf(1000),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("ecx",BigInteger.valueOf(200),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"ecx"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1);
  final IInstruction instruction=new MockInstruction("div",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100));
  assertEquals(4,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  assertEquals(BigInteger.valueOf(5),interpreter.getVariableValue("eax"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("edx"));
  assertFalse(interpreter.isDefined("AF"));
  assertFalse(interpreter.isDefined("CF"));
  assertFalse(interpreter.isDefined("OF"));
  assertFalse(interpreter.isDefined("PF"));
  assertFalse(interpreter.isDefined("SF"));
  assertFalse(interpreter.isDefined("ZF"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
}
