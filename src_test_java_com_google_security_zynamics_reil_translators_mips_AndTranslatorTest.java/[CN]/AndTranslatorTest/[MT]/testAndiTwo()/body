{
  interpreter.setRegister("$a0",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("$s8",BigInteger.valueOf(0x7ffff85cL),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("$ra",BigInteger.valueOf(0x00400018L),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"$a0"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"$s8"));
  final MockOperandTree operandTree3=new MockOperandTree();
  operandTree3.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree3.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"$ra"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2,operandTree3);
  final IInstruction instruction=new MockInstruction("and",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100));
  assertEquals(4,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  assertEquals(BigInteger.valueOf(0x00400018L),interpreter.getVariableValue("$a0"));
  assertEquals(BigInteger.valueOf(0x7ffff85cL),interpreter.getVariableValue("$s8"));
  assertEquals(BigInteger.valueOf(0x00400018L),interpreter.getVariableValue("$ra"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
}
