{
  interpreter.setRegister("R0",BigInteger.valueOf(0x07FFFFDCL),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R1",BigInteger.valueOf(0x00008125L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R2",BigInteger.valueOf(0x00000046L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("C",BigInteger.ONE,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("N",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("Z",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("V",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("Q",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R2"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.OPERATOR,","));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.MEMDEREF,"["));
  operandTree2.root.getChildren().get(0).getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R0"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,String.valueOf(1)));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2);
  final IInstruction instruction=new MockInstruction("STRBT",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100L));
  assertEquals(BigInteger.valueOf(0x07FFFFDDL),interpreter.getVariableValue("R0"));
  assertEquals(BigInteger.valueOf(0x00008125L),interpreter.getVariableValue("R1"));
  assertEquals(BigInteger.valueOf(0x00000046L),interpreter.getVariableValue("R2"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("C"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("N"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("Z"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("V"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("Q"));
  assertEquals(BigInteger.valueOf(0x46L),BigInteger.valueOf(interpreter.readMemoryByte(0x07FFFFDCL)));
  assertEquals(BigInteger.valueOf(1),BigInteger.valueOf(interpreter.getMemorySize()));
  assertEquals(9,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
}
