{
  final CInstruction instruction11=MockCreator.createInstructionWithOperand(new BigInteger("1234"),m_module,m_sql);
  final CInstruction instruction12=MockCreator.createInstructionWithOperand(new BigInteger("1235"),m_module,m_sql);
  final CInstruction instruction13=MockCreator.createInstructionWithOperand(new BigInteger("1236"),m_module,m_sql);
  final CInstruction instruction21=MockCreator.createInstructionWithOperand(new BigInteger("1237"),m_module,m_sql);
  final CInstruction instruction22=MockCreator.createInstructionWithOperand(new BigInteger("1238"),m_module,m_sql);
  final CInstruction instruction23=MockCreator.createInstructionWithOperand(new BigInteger("1239"),m_module,m_sql);
  final CInstruction instruction31=MockCreator.createInstructionWithOperand(new BigInteger("1240"),m_module,m_sql);
  final CInstruction instruction32=MockCreator.createInstructionWithOperand(new BigInteger("1241"),m_module,m_sql);
  final CInstruction instruction33=MockCreator.createInstructionWithOperand(new BigInteger("1242"),m_module,m_sql);
  final INaviCodeNode codeNode1=m_view.getContent().createCodeNode(m_function,Lists.newArrayList(instruction11,instruction12,instruction13));
  final INaviCodeNode codeNode2=m_view.getContent().createCodeNode(m_function,Lists.newArrayList(instruction21,instruction22,instruction23));
  final INaviCodeNode codeNode3=m_view.getContent().createCodeNode(m_function,Lists.newArrayList(instruction31,instruction32,instruction33));
  m_view.getContent().createEdge(codeNode1,codeNode2,EdgeType.JUMP_CONDITIONAL_TRUE);
  m_view.getContent().createEdge(codeNode2,codeNode2,EdgeType.JUMP_CONDITIONAL_FALSE);
  m_view.getContent().createEdge(codeNode2,codeNode3,EdgeType.JUMP_UNCONDITIONAL);
  assertEquals(3,m_view.getEdgeCount());
  CInliningHelper.inlineCodeNode(m_view,codeNode2,Iterables.get(codeNode2.getInstructions(),1),m_function);
  assertEquals(2 + 1 + 5+ 1,m_view.getNodeCount());
  assertEquals(3 + 4 + 3,m_view.getEdgeCount());
  final List<INaviViewNode> blocks=m_view.getGraph().getNodes();
  final INaviCodeNode startNode=(INaviCodeNode)findStartNode(blocks);
  final INaviViewNode returnInlinedNode=findNodeWithLeaveInlinedFunction(blocks);
  assertEquals(0,codeNode1.getIncomingEdges().size());
  assertEquals(1,codeNode1.getOutgoingEdges().size());
  assertEquals(startNode,codeNode1.getOutgoingEdges().get(0).getTarget());
  assertEquals(2,Iterables.size(startNode.getInstructions()));
  assertEquals(instruction21,Iterables.get(startNode.getInstructions(),0));
  assertEquals(instruction22,Iterables.get(startNode.getInstructions(),1));
  assertEquals(2,startNode.getIncomingEdges().size());
  assertEquals(EdgeType.JUMP_CONDITIONAL_TRUE,startNode.getIncomingEdges().get(0).getType());
  assertEquals(EdgeType.JUMP_CONDITIONAL_FALSE,startNode.getIncomingEdges().get(1).getType());
  assertEquals(codeNode1,startNode.getIncomingEdges().get(0).getSource());
  assertEquals(returnInlinedNode,startNode.getIncomingEdges().get(1).getSource());
  assertEquals(1,startNode.getOutgoingEdges().size());
  assertEquals(EdgeType.ENTER_INLINED_FUNCTION,startNode.getOutgoingEdges().get(0).getType());
  final INaviViewNode firstInlinedNode=startNode.getOutgoingEdges().get(0).getTarget();
  assertEquals(m_function.getAddress(),Iterables.get(((INaviCodeNode)firstInlinedNode).getInstructions(),0).getAddress());
  assertEquals(1,firstInlinedNode.getIncomingEdges().size());
  assertEquals(1,firstInlinedNode.getOutgoingEdges().size());
  final INaviViewNode middleInlinedNode=firstInlinedNode.getOutgoingEdges().get(0).getTarget();
  assertEquals(2,middleInlinedNode.getIncomingEdges().size());
  assertEquals(2,middleInlinedNode.getOutgoingEdges().size());
  final INaviViewNode firstReturnNode=middleInlinedNode.getOutgoingEdges().get(0).getTarget();
  final INaviViewNode secondReturnNode=middleInlinedNode.getOutgoingEdges().get(1).getTarget();
  assertEquals(1,firstReturnNode.getIncomingEdges().size());
  assertEquals(1,firstReturnNode.getOutgoingEdges().size());
  assertEquals(EdgeType.LEAVE_INLINED_FUNCTION,firstReturnNode.getOutgoingEdges().get(0).getType());
  assertEquals(returnInlinedNode,firstReturnNode.getOutgoingEdges().get(0).getTarget());
  assertEquals(1,secondReturnNode.getIncomingEdges().size());
  assertEquals(1,secondReturnNode.getOutgoingEdges().size());
  assertEquals(EdgeType.LEAVE_INLINED_FUNCTION,secondReturnNode.getOutgoingEdges().get(0).getType());
  assertEquals(2,returnInlinedNode.getIncomingEdges().size());
  assertEquals(firstReturnNode,returnInlinedNode.getIncomingEdges().get(0).getSource());
  assertEquals(secondReturnNode,returnInlinedNode.getIncomingEdges().get(1).getSource());
  assertEquals(2,returnInlinedNode.getOutgoingEdges().size());
  assertEquals(startNode,returnInlinedNode.getOutgoingEdges().get(0).getTarget());
  assertEquals(codeNode3,returnInlinedNode.getOutgoingEdges().get(1).getTarget());
}
