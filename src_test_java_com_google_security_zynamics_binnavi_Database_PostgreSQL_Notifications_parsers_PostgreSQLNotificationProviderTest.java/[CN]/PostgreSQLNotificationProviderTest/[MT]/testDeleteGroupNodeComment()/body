{
  final CView databaseOneGroupNodeView=databaseOneModuleTwo.getContent().getViewContainer().createView(" GROUP NODE TESTING VIEW ","");
  CViewInserter.insertView(databaseOneView,databaseOneGroupNodeView);
  final INaviGroupNode databaseOneGroupNode=databaseOneGroupNodeView.getContent().createGroupNode(databaseOneGroupNodeView.getGraph().getNodes());
  databaseOneGroupNodeView.save();
  databaseTwoModuleTwo.close();
  databaseTwoModuleTwo.load();
  databaseTwoView.load();
  final INaviView databaseTwoGroupNodeView=Iterables.getLast(databaseTwoModuleTwo.getContent().getViewContainer().getUserViews());
  INaviGroupNode databaseTwoGroupNode=null;
  assertEquals(databaseOneGroupNodeView.getName(),databaseTwoGroupNodeView.getName());
  databaseTwoGroupNodeView.load();
  for (  final INaviViewNode node : databaseTwoGroupNodeView.getContent().getGraph().getNodes()) {
    if (node instanceof INaviGroupNode) {
      databaseTwoGroupNode=(INaviGroupNode)node;
    }
  }
  assertNotNull(databaseTwoGroupNode);
  assertEquals(databaseTwoGroupNode.getId(),databaseOneGroupNode.getId());
  final List<IComment> comments=databaseOneGroupNode.appendComment(" TEST NOTIFICATION PROVIDER TESTS (GROUP NODE COMMENT) ");
synchronized (lock) {
    lock.await(1000,TimeUnit.MILLISECONDS);
  }
  final List<IComment> oneAfter=databaseOneGroupNode.getComments();
  final List<IComment> twoAfter=databaseTwoGroupNode.getComments();
  assertNotNull(oneAfter);
  assertNotNull(twoAfter);
  assertEquals(1,oneAfter.size());
  assertEquals(1,twoAfter.size());
  assertEquals(oneAfter,twoAfter);
  final int oneTwoSize=oneAfter.size();
  final int twoTwoSize=twoAfter.size();
  databaseOneGroupNode.deleteComment(Iterables.getLast(comments));
synchronized (lock) {
    lock.await(1000,TimeUnit.MILLISECONDS);
  }
  final List<IComment> oneThree=databaseOneGroupNode.getComments();
  final List<IComment> twoThree=databaseTwoGroupNode.getComments();
  assertEquals(oneTwoSize - 1,oneThree.size());
  assertEquals(twoTwoSize - 1,twoThree.size());
  assertEquals(oneThree,twoThree);
}
