{
  interpreter.setRegister("$v1",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("$v0",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"$v1"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"$v0"));
  final MockOperandTree operandTree3=new MockOperandTree();
  operandTree3.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree3.root.m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,String.valueOf(0xFFFFFFFFL)));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2,operandTree3);
  final IInstruction instruction=new MockInstruction("addiu",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100));
  assertEquals(3,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  assertEquals(BigInteger.valueOf(0xFFFFFFFFL),interpreter.getVariableValue("$v1"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("$v0"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
}
