{
  final MockNode a=new MockNode("A");
  final MockNode b=new MockNode("B");
  final MockNode c=new MockNode("C");
  final MockNode d=new MockNode("D");
  final MockNode e=new MockNode("E");
  final MockNode f=new MockNode("F");
  final MockNode g=new MockNode("G");
  final MockNode h=new MockNode("H");
  final MockNode i=new MockNode("I");
  final MockNode j=new MockNode("J");
  final MockNode k=new MockNode("K");
  final MockNode l=new MockNode("L");
  final MockNode m=new MockNode("M");
  MockNode.link(a,b);
  MockNode.link(a,c);
  MockNode.link(b,d);
  MockNode.link(b,g);
  MockNode.link(d,f);
  MockNode.link(d,g);
  MockNode.link(f,i);
  MockNode.link(f,k);
  MockNode.link(g,j);
  MockNode.link(j,i);
  MockNode.link(i,l);
  MockNode.link(k,l);
  MockNode.link(l,b);
  MockNode.link(l,m);
  MockNode.link(c,e);
  MockNode.link(c,h);
  MockNode.link(e,c);
  MockNode.link(e,h);
  MockNode.link(h,m);
  final List<MockNode> nodes=Lists.newArrayList(a,b,c,d,e,f,g,h,i,j,k,l,m);
  final List<MockEdge> edges=new ArrayList<MockEdge>();
  final DirectedGraph<MockNode,MockEdge> graph=new DirectedGraph<MockNode,MockEdge>(nodes,edges);
  final Tree<MockNode> tree=LengauerTarjan.calculate(graph,a).first();
  assertEquals(a,tree.getRootNode().getObject());
  assertEquals(3,tree.getRootNode().getChildren().size());
  assertPossible(tree.getRootNode().getChildren().get(0).getObject(),b,c,m);
  assertPossible(tree.getRootNode().getChildren().get(1).getObject(),b,c,m);
  assertPossible(tree.getRootNode().getChildren().get(2).getObject(),b,c,m);
  assertDifferent(tree.getRootNode().getChildren().get(0).getObject(),tree.getRootNode().getChildren().get(1).getObject(),tree.getRootNode().getChildren().get(2).getObject());
  final ITreeNode<MockNode> bnode=findNode(tree.getRootNode(),b);
  assertEquals(4,bnode.getChildren().size());
  assertPossible(bnode.getChildren().get(0).getObject(),d,g,i,l);
  assertPossible(bnode.getChildren().get(1).getObject(),d,g,i,l);
  assertPossible(bnode.getChildren().get(2).getObject(),d,g,i,l);
  assertPossible(bnode.getChildren().get(3).getObject(),d,g,i,l);
  assertDifferent(bnode.getChildren().get(0).getObject(),bnode.getChildren().get(1).getObject(),bnode.getChildren().get(2).getObject(),bnode.getChildren().get(3).getObject());
  final ITreeNode<MockNode> cnode=findNode(tree.getRootNode(),c);
  assertEquals(2,cnode.getChildren().size());
  assertPossible(cnode.getChildren().get(0).getObject(),e,h);
  assertPossible(cnode.getChildren().get(1).getObject(),e,h);
  assertDifferent(cnode.getChildren().get(0).getObject(),cnode.getChildren().get(1).getObject());
  final ITreeNode<MockNode> dnode=findNode(tree.getRootNode(),d);
  assertEquals(1,dnode.getChildren().size());
  assertPossible(dnode.getChildren().get(0).getObject(),f);
  assertEquals(0,findNode(tree.getRootNode(),e).getChildren().size());
  final ITreeNode<MockNode> fnode=findNode(tree.getRootNode(),f);
  assertEquals(1,fnode.getChildren().size());
  assertPossible(fnode.getChildren().get(0).getObject(),k);
  final ITreeNode<MockNode> gnode=findNode(tree.getRootNode(),g);
  assertEquals(1,gnode.getChildren().size());
  assertPossible(gnode.getChildren().get(0).getObject(),j);
  assertEquals(0,findNode(tree.getRootNode(),h).getChildren().size());
  assertEquals(0,findNode(tree.getRootNode(),i).getChildren().size());
  assertEquals(0,findNode(tree.getRootNode(),j).getChildren().size());
  assertEquals(0,findNode(tree.getRootNode(),k).getChildren().size());
  assertEquals(0,findNode(tree.getRootNode(),l).getChildren().size());
  assertEquals(0,findNode(tree.getRootNode(),m).getChildren().size());
}
