{
  if (instruction.getOperands().size() != 2) {
    throw new InternalTranslationException("Error: Argument instruction is not a ror instruction (invalid number of operands)");
  }
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final List<? extends IOperandTree> operands=instruction.getOperands();
  final IOperandTree targetOperand=operands.get(0);
  final IOperandTree sourceOperand=operands.get(1);
  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);
  instructions.addAll(sourceResult.getInstructions());
  offset=baseOffset + instructions.size();
  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);
  instructions.addAll(targetResult.getInstructions());
  offset=baseOffset + instructions.size();
  final int linesBefore=instructions.size();
  final OperandSize sourceSize=sourceResult.getSize();
  final OperandSize targetSize=targetResult.getSize();
  final String sourceRegister=sourceResult.getRegister();
  final String targetRegister=targetResult.getRegister();
  final String rotateMask=environment.getNextVariableString();
  final String rotateMaskZero=environment.getNextVariableString();
  final String rotateMaskLessOne=environment.getNextVariableString();
  final String rotateMaskOne=environment.getNextVariableString();
  final String shrValue=environment.getNextVariableString();
  final String shredResult=environment.getNextVariableString();
  final String shlValue=environment.getNextVariableString();
  final String shledResult=environment.getNextVariableString();
  final String result=environment.getNextVariableString();
  final String tempCf=environment.getNextVariableString();
  final String tempOf=environment.getNextVariableString();
  final String tempOfLsb=environment.getNextVariableString();
  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(sourceSize));
  final String modVal=String.valueOf(sourceSize.getBitSize());
  final String msbMask2nd=String.valueOf(TranslationHelpers.getMsbMask(sourceSize) / 2);
  final String shiftMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(sourceSize));
  final String shift2ndMsbLsb=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(sourceSize) / 2);
  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,targetSize,modVal,targetSize,rotateMask));
  instructions.add(ReilHelpers.createBisz(offset + 1,targetSize,rotateMask,OperandSize.BYTE,rotateMaskZero));
  instructions.add(ReilHelpers.createSub(offset + 2,targetSize,rotateMask,targetSize,"1",targetSize,rotateMaskLessOne));
  instructions.add(ReilHelpers.createBisz(offset + 3,targetSize,rotateMaskLessOne,OperandSize.BYTE,rotateMaskOne));
  instructions.add(ReilHelpers.createSub(offset + 4,OperandSize.BYTE,"0",OperandSize.BYTE,rotateMask,OperandSize.BYTE,shrValue));
  instructions.add(ReilHelpers.createBsh(offset + 5,targetSize,targetRegister,OperandSize.BYTE,shrValue,sourceSize,shredResult));
  instructions.add(ReilHelpers.createSub(offset + 6,OperandSize.BYTE,modVal,OperandSize.BYTE,rotateMask,OperandSize.BYTE,shlValue));
  instructions.add(ReilHelpers.createBsh(offset + 7,targetSize,targetRegister,OperandSize.BYTE,shlValue,sourceSize,shledResult));
  instructions.add(ReilHelpers.createOr(offset + 8,sourceSize,shredResult,sourceSize,shledResult,sourceSize,result));
  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 18);
  instructions.add(ReilHelpers.createJcc(offset + 9,OperandSize.BYTE,rotateMaskZero,OperandSize.ADDRESS,jmpGoal));
  instructions.add(ReilHelpers.createAnd(offset + 10,sourceSize,result,sourceSize,msbMask,sourceSize,tempCf));
  instructions.add(ReilHelpers.createBsh(offset + 11,sourceSize,tempCf,sourceSize,shiftMsbLsb,OperandSize.BYTE,Helpers.CARRY_FLAG));
  final String jmpGoal2=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 15);
  instructions.add(ReilHelpers.createJcc(offset + 12,OperandSize.BYTE,rotateMaskOne,OperandSize.ADDRESS,jmpGoal2));
  instructions.add(ReilHelpers.createUndef(offset + 13,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final String jmpGoal3=String.format("%d.%d",instruction.getAddress().toLong(),linesBefore + 18);
  instructions.add(ReilHelpers.createJcc(offset + 14,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal3));
  instructions.add(ReilHelpers.createAnd(offset + 15,sourceSize,result,sourceSize,msbMask2nd,sourceSize,tempOf));
  instructions.add(ReilHelpers.createBsh(offset + 16,sourceSize,tempOf,sourceSize,shift2ndMsbLsb,OperandSize.BYTE,tempOfLsb));
  instructions.add(ReilHelpers.createBsh(offset + 17,OperandSize.BYTE,tempOfLsb,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  Helpers.writeBack(environment,offset + 18,targetOperand,result,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);
}
