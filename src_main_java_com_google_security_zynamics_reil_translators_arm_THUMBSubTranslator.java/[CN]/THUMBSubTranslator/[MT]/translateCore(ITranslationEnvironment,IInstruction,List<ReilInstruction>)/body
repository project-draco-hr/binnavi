{
  final IOperandTreeNode operand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode operand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode operand3=instruction.getOperands().size() == 3 ? instruction.getOperands().get(2).getRootNode().getChildren().get(0) : null;
  final String sourceRegister1=(operand1.getValue());
  final String sourceRegister2=(operand2.getValue());
  final String sourceRegister3=instruction.getOperands().size() == 3 ? (operand3.getValue()) : null;
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize wd=OperandSize.WORD;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  if (instruction.getOperands().size() == 3) {
    if ((operand1.getType() == ExpressionType.REGISTER) && (operand2.getType() == ExpressionType.REGISTER) && (operand3.getType() == ExpressionType.REGISTER)) {
      instructions.add(ReilHelpers.createSub(baseOffset++,dw,sourceRegister2,dw,sourceRegister3,qw,tmpVar1));
      instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));
      if (instruction.getMnemonic().contains("SUBS")) {
        instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister1,wd,String.valueOf(-31L),bt,"N"));
        instructions.add(ReilHelpers.createBisz(baseOffset++,dw,sourceRegister1,bt,"Z"));
        instructions.add(ReilHelpers.createBsh(baseOffset++,qw,tmpVar1,wd,String.valueOf(-31L),bt,tmpVar2));
        instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar2,bt,String.valueOf(1L),bt,tmpVar3));
        instructions.add(ReilHelpers.createBisz(baseOffset++,bt,tmpVar3,bt,"C"));
        Helpers.subOverflow(baseOffset,environment,instruction,instructions,dw,sourceRegister2,dw,sourceRegister3,bt,tmpVar2,"V",32);
      }
    }
 else     if ((operand1.getType() == ExpressionType.REGISTER) && (operand2.getType() == ExpressionType.REGISTER) && (operand3.getType() == ExpressionType.IMMEDIATE_INTEGER)) {
      instructions.add(ReilHelpers.createSub(baseOffset++,dw,sourceRegister2,dw,sourceRegister3,qw,tmpVar1));
      instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));
      if (instruction.getMnemonic().contains("SUBS")) {
        instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister1,wd,String.valueOf(-31L),bt,"N"));
        instructions.add(ReilHelpers.createBisz(baseOffset++,dw,sourceRegister1,bt,"Z"));
        instructions.add(ReilHelpers.createBsh(baseOffset++,qw,tmpVar1,wd,String.valueOf(-31L),bt,tmpVar2));
        instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar2,bt,String.valueOf(1L),bt,tmpVar3));
        instructions.add(ReilHelpers.createBisz(baseOffset++,bt,tmpVar3,bt,"C"));
        Helpers.subOverflow(baseOffset,environment,instruction,instructions,dw,sourceRegister2,dw,sourceRegister3,bt,tmpVar2,"V",32);
      }
    }
  }
 else   if (instruction.getOperands().size() == 2) {
    if ((sourceRegister2).equalsIgnoreCase("SP")) {
      instructions.add(ReilHelpers.createSub(baseOffset++,dw,sourceRegister1,dw,sourceRegister2,qw,tmpVar1));
      instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));
    }
 else {
      instructions.add(ReilHelpers.createSub(baseOffset++,dw,sourceRegister1,dw,sourceRegister2,qw,tmpVar1));
      instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar1,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));
      if (instruction.getMnemonic().contains("SUBS")) {
        instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister1,wd,String.valueOf(-31L),bt,"N"));
        instructions.add(ReilHelpers.createBisz(baseOffset++,dw,sourceRegister1,bt,"Z"));
        instructions.add(ReilHelpers.createBsh(baseOffset++,qw,tmpVar1,wd,String.valueOf(-31L),bt,tmpVar2));
        instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar2,bt,String.valueOf(1L),bt,tmpVar3));
        instructions.add(ReilHelpers.createBisz(baseOffset++,bt,tmpVar3,bt,"C"));
        Helpers.subOverflow(baseOffset,environment,instruction,instructions,dw,sourceRegister1,dw,sourceRegister2,bt,tmpVar2,"V",32);
      }
    }
  }
}
