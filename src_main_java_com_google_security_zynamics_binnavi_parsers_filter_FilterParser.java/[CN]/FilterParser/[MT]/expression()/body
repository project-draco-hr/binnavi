{
  final FilterParser.expression_return retval=new FilterParser.expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token OR3=null;
  FilterParser.andExpression_return andExpression2=null;
  FilterParser.andExpression_return andExpression4=null;
  Object OR3_tree=null;
  try {
{
      root_0=adaptor.nil();
      pushFollow(FOLLOW_andExpression_in_expression140);
      andExpression2=andExpression();
      state._fsp--;
      adaptor.addChild(root_0,andExpression2.getTree());
      loop1:       do {
        int alt1=2;
        final int LA1_0=input.LA(1);
        if ((LA1_0 == OR)) {
          alt1=1;
        }
switch (alt1) {
case 1:
{
            OR3=(Token)match(input,OR,FOLLOW_OR_in_expression143);
            OR3_tree=adaptor.create(OR3);
            root_0=adaptor.becomeRoot(OR3_tree,root_0);
            pushFollow(FOLLOW_andExpression_in_expression146);
            andExpression4=andExpression();
            state._fsp--;
            adaptor.addChild(root_0,andExpression4.getTree());
          }
        break;
default :
      break loop1;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (final RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
