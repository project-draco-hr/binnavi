{
  final FilterParser.prog_return retval=new FilterParser.prog_return();
  retval.start=input.LT(1);
  Object root_0=null;
  FilterParser.expression_return expression1=null;
  try {
{
      root_0=adaptor.nil();
      pushFollow(FOLLOW_expression_in_prog130);
      expression1=expression();
      state._fsp--;
      adaptor.addChild(root_0,expression1.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  final RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
