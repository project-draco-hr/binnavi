{
  final MemoryExpressionParser.expression_return retval=new MemoryExpressionParser.expression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  MemoryExpressionParser.addExpression_return addExpression3=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_addExpression_in_expression199);
      addExpression3=addExpression();
      state._fsp--;
      adaptor.addChild(root_0,addExpression3.getTree());
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  final RecognitionException e) {
    throw e;
  }
 finally {
  }
  return retval;
}
