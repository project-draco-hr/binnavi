{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"neg");
  if (instruction.getOperands().size() != 1) {
    throw new InternalTranslationException("Error: Argument instruction is not an neg instruction (invalid number of operands)");
  }
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final IOperandTree operand=instruction.getOperands().get(0);
  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);
  offset=baseOffset + instructions.size();
  final String operandRegister=result.getRegister();
  final OperandSize size=result.getSize();
  final OperandSize resultSize=TranslationHelpers.getNextSize(size);
  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));
  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));
  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));
  final String targetIsZero=environment.getNextVariableString();
  final String msbTarget=environment.getNextVariableString();
  final String negResult=environment.getNextVariableString();
  final String msbResult=environment.getNextVariableString();
  final String tempOf=environment.getNextVariableString();
  final String truncatedResult=environment.getNextVariableString();
  instructions.add(ReilHelpers.createBisz(offset,size,operandRegister,OperandSize.BYTE,targetIsZero));
  instructions.add(ReilHelpers.createBisz(offset + 1,OperandSize.BYTE,targetIsZero,OperandSize.BYTE,Helpers.CARRY_FLAG));
  instructions.add(ReilHelpers.createAnd(offset + 2,size,operandRegister,size,msbMask,size,msbTarget));
  instructions.add(ReilHelpers.createSub(offset + 3,size,"0",size,operandRegister,resultSize,negResult));
  instructions.add(ReilHelpers.createAnd(offset + 4,resultSize,negResult,size,msbMask,size,msbResult));
  instructions.add(ReilHelpers.createBsh(offset + 5,size,msbResult,size,shiftValue,OperandSize.BYTE,Helpers.SIGN_FLAG));
  instructions.add(ReilHelpers.createAnd(offset + 6,size,msbTarget,size,msbResult,size,tempOf));
  instructions.add(ReilHelpers.createBsh(offset + 7,size,tempOf,size,shiftValue,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  instructions.add(ReilHelpers.createAnd(offset + 8,resultSize,negResult,size,truncateMask,size,truncatedResult));
  instructions.add(ReilHelpers.createBisz(offset + 9,size,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));
  Helpers.writeBack(environment,offset + 10,operand,truncatedResult,size,result.getAddress(),result.getType(),instructions);
}
