{
  interpreter.setRegister("AF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("CF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("OF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("ZF",BigInteger.ZERO,OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("ecx",BigInteger.valueOf(0xFFFF0020L),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("edx",BigInteger.valueOf(0),OperandSize.DWORD,ReilRegisterStatus.DEFINED);
  interpreter.setMemory(12,0x1234,4);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"word");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"cx"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"dword");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.MEMDEREF,"["));
  operandTree2.root.m_children.get(0).m_children.add(new MockOperandTreeNode(ExpressionType.OPERATOR,"+"));
  operandTree2.root.m_children.get(0).m_children.get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"edx"));
  operandTree2.root.m_children.get(0).m_children.get(0).m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,"12"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2);
  final IInstruction instruction=new MockInstruction("imul",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100));
  assertEquals(5,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  assertEquals(BigInteger.valueOf(0xFFFF4680L),interpreter.getVariableValue("ecx"));
  assertFalse(interpreter.isDefined("AF"));
  assertTrue(interpreter.isDefined("CF"));
  assertTrue(interpreter.isDefined("OF"));
  assertFalse(interpreter.isDefined("SF"));
  assertFalse(interpreter.isDefined("ZF"));
  assertEquals(BigInteger.valueOf(4L),BigInteger.valueOf(interpreter.getMemorySize()));
}
