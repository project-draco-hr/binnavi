{
  Preconditions.checkNotNull(provider,"IE02510: provider argument can not be null");
  Preconditions.checkNotNull(view,"IE02511: view argument can not be null");
  Preconditions.checkNotNull(nodes,"IE02512: nodes argument can not be null");
  final String query="SELECT nodes.view_id, nodes.id, functions.module_id, " + " function, fnodes.comment_id as local_comment, x, y, width, height, " + " color, selected, visible FROM " + CTableNames.NODES_TABLE + " AS nodes JOIN "+ CTableNames.FUNCTION_NODES_TABLE+ " AS fnodes "+ " ON nodes.id = fnodes.node_id JOIN "+ CTableNames.FUNCTIONS_TABLE+ " AS functions ON functions.address = fnodes.function "+ " AND functions.module_id = fnodes.module_id  WHERE view_id = ?";
  final Map<Integer,INaviFunctionNode> commentIdToFunctionNode=new HashMap<Integer,INaviFunctionNode>();
  try {
    final PreparedStatement statement=provider.getConnection().getConnection().prepareStatement(query);
    statement.setInt(1,view.getConfiguration().getId());
    final ResultSet resultSet=statement.executeQuery();
    try {
      while (resultSet.next()) {
        final int moduleId=resultSet.getInt("module_id");
        final INaviModule module=provider.findModule(moduleId);
        if (!module.isLoaded()) {
          try {
            module.load();
          }
 catch (          final CouldntLoadDataException e) {
            throw new CPartialLoadException("E00064: The view could not be loaded because not all modules that form the view are loaded",module);
          }
catch (          final LoadCancelledException e) {
            throw new CPartialLoadException("E00065: The view could not be loaded because not all modules that form the view are loaded",module);
          }
        }
        final IAddress address=PostgreSQLHelpers.loadAddress(resultSet,"function");
        final INaviFunction function=module.getContent().getFunctionContainer().getFunction(address);
        final int nodeId=resultSet.getInt("id");
        Integer commentId=resultSet.getInt("local_comment");
        if (resultSet.wasNull()) {
          commentId=null;
        }
        final double posX=resultSet.getDouble("x");
        final double posY=resultSet.getDouble("y");
        final double width=resultSet.getDouble("width");
        final double height=resultSet.getDouble("height");
        final Color color=new Color(resultSet.getInt("color"));
        final boolean selected=resultSet.getBoolean("selected");
        final boolean visible=resultSet.getBoolean("visible");
        final INaviFunctionNode functionNode=new CFunctionNode(nodeId,function,posX,posY,width,height,color,selected,visible,null,new HashSet<CTag>(),provider);
        nodes.add(functionNode);
        if (commentId != null) {
          commentIdToFunctionNode.put(commentId,functionNode);
        }
      }
    }
  finally {
      resultSet.close();
    }
    if (!commentIdToFunctionNode.isEmpty()) {
      final HashMap<Integer,ArrayList<IComment>> commentIdsToComments=PostgreSQLCommentFunctions.loadMultipleCommentsById(provider,commentIdToFunctionNode.keySet());
      for (      final Entry<Integer,ArrayList<IComment>> commentIdToComment : commentIdsToComments.entrySet()) {
        commentIdToFunctionNode.get(commentIdToComment.getKey()).initializeLocalFunctionComment(commentIdToComment.getValue());
      }
    }
  }
 catch (  final SQLException exception) {
    throw new CouldntLoadDataException(exception);
  }
}
