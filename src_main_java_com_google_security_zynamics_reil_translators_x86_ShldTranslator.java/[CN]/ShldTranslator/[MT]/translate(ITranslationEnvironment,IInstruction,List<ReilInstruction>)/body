{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"shld");
  if (instruction.getOperands().size() != 3) {
    throw new InternalTranslationException("Error: Argument instruction is not a shl instruction (invalid number of operands)");
  }
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final List<? extends IOperandTree> operands=instruction.getOperands();
  final TranslationResult firstResult=Helpers.translateOperand(environment,offset,operands.get(0),true);
  instructions.addAll(firstResult.getInstructions());
  offset=baseOffset + instructions.size();
  final TranslationResult secondResult=Helpers.translateOperand(environment,offset,operands.get(1),true);
  instructions.addAll(secondResult.getInstructions());
  offset=baseOffset + instructions.size();
  final TranslationResult thirdResult=Helpers.translateOperand(environment,offset,operands.get(2),true);
  instructions.addAll(thirdResult.getInstructions());
  final String truncatedShiftValue=environment.getNextVariableString();
  final String truncatedShiftValueZero=environment.getNextVariableString();
  offset=baseOffset + instructions.size();
  instructions.add(ReilHelpers.createAnd(offset++,thirdResult.getSize(),thirdResult.getRegister(),OperandSize.BYTE,"31",OperandSize.BYTE,truncatedShiftValue));
  instructions.add(ReilHelpers.createBisz(offset++,OperandSize.BYTE,truncatedShiftValue,OperandSize.BYTE,truncatedShiftValueZero));
  final int jumpInsertIndex1=(int)(offset - baseOffset);
  offset++;
  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.AUXILIARY_FLAG));
  final String sizeSubtractionResult=environment.getNextVariableString();
  final String sizeMaskingResult=environment.getNextVariableString();
  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,String.valueOf(firstResult.getSize().getBitSize()),OperandSize.BYTE,truncatedShiftValue,OperandSize.WORD,sizeSubtractionResult));
  instructions.add(ReilHelpers.createAnd(offset++,OperandSize.WORD,sizeSubtractionResult,OperandSize.WORD,String.valueOf(0x8000),OperandSize.WORD,sizeMaskingResult));
  final int jumpInsertIndex2=(int)(offset - baseOffset);
  offset++;
  final String shiftedFirstInput=environment.getNextVariableString();
  final String shiftMask=String.valueOf(firstResult.getSize().getBitSize());
  final OperandSize combinedSize=TranslationHelpers.getNextSize(firstResult.getSize());
  final OperandSize extendedSize=TranslationHelpers.getNextSize(combinedSize);
  final String combinedSource=environment.getNextVariableString();
  final String shiftedResult=environment.getNextVariableString();
  instructions.add(ReilHelpers.createBsh(offset++,firstResult.getSize(),firstResult.getRegister(),firstResult.getSize(),shiftMask,combinedSize,shiftedFirstInput));
  instructions.add(ReilHelpers.createOr(offset++,combinedSize,shiftedFirstInput,secondResult.getSize(),secondResult.getRegister(),combinedSize,combinedSource));
  instructions.add(ReilHelpers.createBsh(offset++,combinedSize,combinedSource,OperandSize.BYTE,truncatedShiftValue,extendedSize,shiftedResult));
  final String isolationMask=getAllButMask(combinedSize,firstResult.getSize());
  final String isolationResult=environment.getNextVariableString();
  final String shiftedIsolationResult=environment.getNextVariableString();
  instructions.add(ReilHelpers.createAnd(offset++,extendedSize,shiftedResult,combinedSize,isolationMask,combinedSize,isolationResult));
  instructions.add(ReilHelpers.createBsh(offset++,combinedSize,isolationResult,OperandSize.BYTE,"-" + shiftMask,firstResult.getSize(),shiftedIsolationResult));
  instructions.add(ReilHelpers.createBisz(offset++,firstResult.getSize(),shiftedIsolationResult,OperandSize.BYTE,Helpers.ZERO_FLAG));
  Helpers.generateSignFlagCode(environment,offset,shiftedIsolationResult,firstResult.getSize(),instructions);
  offset=baseOffset + instructions.size() + 2;
  final String tempCf=environment.getNextVariableString();
  final String carryMask=String.valueOf(getCarryMask(combinedSize));
  final String shiftCarryLsb=String.valueOf(-combinedSize.getBitSize());
  instructions.add(ReilHelpers.createAnd(offset++,extendedSize,shiftedResult,extendedSize,carryMask,extendedSize,tempCf));
  instructions.add(ReilHelpers.createBsh(offset++,extendedSize,tempCf,extendedSize,shiftCarryLsb,OperandSize.BYTE,Helpers.CARRY_FLAG));
  final String tempInput=environment.getNextVariableString();
  instructions.add(ReilHelpers.createStr(offset++,firstResult.getSize(),firstResult.getRegister(),firstResult.getSize(),tempInput));
  Helpers.writeBack(environment,offset,operands.get(0),shiftedIsolationResult,firstResult.getSize(),firstResult.getAddress(),firstResult.getType(),instructions);
  offset=baseOffset + instructions.size() + 2;
  final String shiftValueOne=environment.getNextVariableString();
  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,truncatedShiftValue,OperandSize.BYTE,"1",OperandSize.WORD,shiftValueOne));
  final int jumpInsertIndex3=(int)(offset - baseOffset);
  offset++;
  final String xoredMsb=environment.getNextVariableString();
  final String maskedMsb=environment.getNextVariableString();
  final long msbMask=TranslationHelpers.getMsbMask(firstResult.getSize());
  final long msbShift=TranslationHelpers.getShiftMsbLsbMask(firstResult.getSize());
  instructions.add(ReilHelpers.createXor(offset++,firstResult.getSize(),tempInput,firstResult.getSize(),shiftedIsolationResult,firstResult.getSize(),xoredMsb));
  instructions.add(ReilHelpers.createAnd(offset++,firstResult.getSize(),xoredMsb,firstResult.getSize(),String.valueOf(msbMask),firstResult.getSize(),maskedMsb));
  instructions.add(ReilHelpers.createBsh(offset++,firstResult.getSize(),maskedMsb,OperandSize.BYTE,String.valueOf(msbShift),OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final int jumpInsertIndex4=(int)(offset - baseOffset);
  offset++;
  final String largeValueHandler=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);
  final IOperandTree inputOperand=operands.get(0);
  if (inputOperand.getRootNode().getChildren().get(0).getType() == com.google.security.zynamics.zylib.disassembly.ExpressionType.REGISTER) {
    final String operand=Helpers.getLeafValue(inputOperand.getRootNode());
    final String undefRegister=Helpers.getOperandSize(inputOperand) == environment.getArchitectureSize() ? operand : Helpers.getParentRegister(operand);
    instructions.add(ReilHelpers.createUndef(offset++,environment.getArchitectureSize(),undefRegister));
  }
  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.CARRY_FLAG));
  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.SIGN_FLAG));
  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.ZERO_FLAG));
  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.PARITY_FLAG));
  final String notOneHandler=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);
  instructions.add(ReilHelpers.createUndef(offset++,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final String jmpGoalEnd=String.format("%d.%d",instruction.getAddress().toLong(),offset - baseOffset);
  instructions.add(ReilHelpers.createNop(offset++));
  instructions.add(jumpInsertIndex1,ReilHelpers.createJcc(baseOffset + jumpInsertIndex1,OperandSize.BYTE,truncatedShiftValueZero,OperandSize.ADDRESS,jmpGoalEnd));
  instructions.add(jumpInsertIndex2,ReilHelpers.createJcc(baseOffset + jumpInsertIndex2,OperandSize.WORD,sizeMaskingResult,OperandSize.ADDRESS,largeValueHandler));
  instructions.add(jumpInsertIndex3,ReilHelpers.createJcc(baseOffset + jumpInsertIndex3,OperandSize.WORD,shiftValueOne,OperandSize.ADDRESS,notOneHandler));
  instructions.add(jumpInsertIndex4,ReilHelpers.createJcc(baseOffset + jumpInsertIndex4,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoalEnd));
}
