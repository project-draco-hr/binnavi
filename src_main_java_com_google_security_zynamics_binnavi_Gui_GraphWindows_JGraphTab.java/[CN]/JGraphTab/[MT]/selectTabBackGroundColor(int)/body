{
  final int insertionPosition=Iterables.indexOf(moduleIdCount.keySet(),Predicates.equalTo(seed));
switch (insertionPosition) {
case 0:
    return Color.getHSBColor((float)0.55,(float)0.2,(float)0.8);
case 1:
  return Color.getHSBColor((float)0.6,(float)0.2,(float)0.8);
case 2:
return Color.getHSBColor((float)0.65,(float)0.2,(float)0.8);
case 3:
return Color.getHSBColor((float)0.7,(float)0.2,(float)0.8);
case 4:
return Color.getHSBColor((float)0.75,(float)0.2,(float)0.8);
case 5:
return Color.getHSBColor((float)0.8,(float)0.2,(float)0.8);
case 6:
return Color.getHSBColor((float)0.85,(float)0.2,(float)0.8);
case 7:
return Color.getHSBColor((float)0.9,(float)0.2,(float)0.8);
case 8:
return Color.getHSBColor((float)0.95,(float)0.2,(float)0.8);
case 9:
return Color.getHSBColor(1,(float)0.2,(float)0.8);
case 10:
return Color.getHSBColor((float)0.05,(float)0.2,(float)0.8);
case 11:
return Color.getHSBColor((float)0.1,(float)0.2,(float)0.8);
case 12:
return Color.getHSBColor((float)0.15,(float)0.2,(float)0.8);
case 13:
return Color.getHSBColor((float)0.2,(float)0.2,(float)0.8);
case 14:
return Color.getHSBColor((float)0.25,(float)0.2,(float)0.8);
case 15:
return Color.getHSBColor((float)0.3,(float)0.2,(float)0.8);
case 16:
return Color.getHSBColor((float)0.35,(float)0.2,(float)0.8);
case 17:
return Color.getHSBColor((float)0.4,(float)0.2,(float)0.8);
case 18:
return Color.getHSBColor((float)0.45,(float)0.2,(float)0.8);
case 19:
return Color.getHSBColor((float)0.5,(float)0.2,(float)0.8);
default :
return Color.WHITE;
}
}
