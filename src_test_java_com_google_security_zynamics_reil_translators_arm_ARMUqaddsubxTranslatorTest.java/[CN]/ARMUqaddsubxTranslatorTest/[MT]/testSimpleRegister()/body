{
  interpreter.setRegister("R0",BigInteger.valueOf(0x0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R1",BigInteger.valueOf(0xee8e8266L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R2",BigInteger.valueOf(0x01ffc9e0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("C",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R0"));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R1"));
  final MockOperandTree operandTree3=new MockOperandTree();
  operandTree3.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree3.root.m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R2"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2,operandTree3);
  final IInstruction instruction=new MockInstruction("UQADDSUBX",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100L));
  assertEquals(BigInteger.valueOf(0xffff8067L),interpreter.getVariableValue("R0"));
  assertEquals(BigInteger.valueOf(0xee8e8266L),interpreter.getVariableValue("R1"));
  assertEquals(BigInteger.valueOf(0x01ffc9e0L),interpreter.getVariableValue("R2"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("C"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
  assertEquals(5,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
}
