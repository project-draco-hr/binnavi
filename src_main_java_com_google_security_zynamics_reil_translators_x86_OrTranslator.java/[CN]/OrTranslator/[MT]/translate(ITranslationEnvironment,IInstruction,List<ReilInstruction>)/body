{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"or");
  if (instruction.getOperands().size() != 2) {
    throw new InternalTranslationException("Error: Argument instruction is not a or instruction (invalid number of operands)");
  }
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final List<? extends IOperandTree> operands=instruction.getOperands();
  final IOperandTree targetOperand=operands.get(0);
  final IOperandTree sourceOperand=operands.get(1);
  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);
  instructions.addAll(sourceResult.getInstructions());
  offset=baseOffset + instructions.size();
  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);
  instructions.addAll(targetResult.getInstructions());
  offset=baseOffset + instructions.size();
  final OperandSize size=targetResult.getSize();
  final String sourceRegister=sourceResult.getRegister();
  final String targetRegister=targetResult.getRegister();
  final String orResult=environment.getNextVariableString();
  instructions.add(ReilHelpers.createOr(offset,size,sourceRegister,size,targetRegister,size,orResult));
  Helpers.generateBinaryOperationFlags(environment,offset + 1,orResult,size,instructions);
  offset=baseOffset + instructions.size();
  Helpers.writeBack(environment,offset,targetOperand,orResult,size,targetResult.getAddress(),targetResult.getType(),instructions);
}
