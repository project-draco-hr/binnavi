{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,mnemonic);
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode integerOperand1=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final IOperandTreeNode integerOperand2=(instruction.getOperands().size() >= 4) ? instruction.getOperands().get(3).getRootNode().getChildren().get(0) : null;
  final IOperandTreeNode integerOperand3=(instruction.getOperands().size() == 5) ? instruction.getOperands().get(4).getRootNode().getChildren().get(0) : null;
  final String targetRegister=registerOperand1.getValue();
  final String sourceRegister=registerOperand2.getValue();
  String SH="";
  String MB="";
  String ME="";
  if (isSimplified) {
    if (instruction.getMnemonic().equals("inslwi") || instruction.getMnemonic().equals("inslwi.")) {
      SH=String.valueOf(32 - Integer.decode(integerOperand2.getValue()));
      MB=integerOperand2.getValue();
      ME=String.valueOf((Integer.decode(integerOperand1.getValue()) + Integer.decode(integerOperand2.getValue())) - 1);
    }
 else     if (instruction.getMnemonic().equals("insrwi") || instruction.getMnemonic().equals("insrwi.")) {
      SH=String.valueOf(32 - (Integer.decode(integerOperand2.getValue()) + Integer.decode(integerOperand1.getValue())));
      MB=integerOperand2.getValue();
      ME=String.valueOf((Integer.decode(integerOperand2.getValue()) + Integer.decode(integerOperand1.getValue())) - 1);
    }
 else {
      SH=integerOperand1.getValue();
      MB=integerOperand2.getValue();
    }
  }
 else {
    SH=integerOperand1.getValue();
    MB=integerOperand2.getValue();
    ME=integerOperand3.getValue();
  }
  final String crTemp=environment.getNextVariableString();
  final String rotateVar1=environment.getNextVariableString();
  final String rotateVar2=environment.getNextVariableString();
  final String rotateVar3=environment.getNextVariableString();
  final String rotateVar4=environment.getNextVariableString();
  final String normalMask=(instruction.getOperands().size() == 4) && !isSimplified ? integerOperand2.getValue() : Helpers.getRotateMask(MB,ME);
  final String inverseMask=environment.getNextVariableString();
  final String maskVar1=environment.getNextVariableString();
  final String maskVar2=environment.getNextVariableString();
  final OperandSize dw=OperandSize.DWORD;
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister,dw,SH,dw,rotateVar1));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister,dw,String.valueOf(-(32 - Integer.decode(SH))),dw,rotateVar2));
  instructions.add(ReilHelpers.createOr(baseOffset++,dw,rotateVar1,dw,rotateVar2,dw,rotateVar3));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,rotateVar3,dw,String.valueOf(0xFFFFFFFFL),dw,rotateVar4));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,rotateVar4,dw,normalMask,dw,maskVar1));
  instructions.add(ReilHelpers.createXor(baseOffset++,dw,normalMask,dw,String.valueOf(0xFFFFFFFFL),dw,inverseMask));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,targetRegister,dw,inverseMask,dw,maskVar2));
  instructions.add(ReilHelpers.createOr(baseOffset++,dw,maskVar1,dw,maskVar2,dw,targetRegister));
  if (setCr) {
    instructions.add(ReilHelpers.createBisz(baseOffset++,OperandSize.DWORD,targetRegister,OperandSize.BYTE,Helpers.CR0_EQUAL));
    instructions.add(ReilHelpers.createBsh(baseOffset++,OperandSize.DWORD,targetRegister,OperandSize.WORD,"-31",OperandSize.BYTE,Helpers.CR0_LESS_THEN));
    instructions.add(ReilHelpers.createOr(baseOffset++,OperandSize.BYTE,Helpers.CR0_EQUAL,OperandSize.BYTE,Helpers.CR0_LESS_THEN,OperandSize.BYTE,crTemp));
    instructions.add(ReilHelpers.createBisz(baseOffset++,OperandSize.BYTE,crTemp,OperandSize.BYTE,Helpers.CR0_GREATER_THEN));
    instructions.add(ReilHelpers.createStr(baseOffset,OperandSize.BYTE,Helpers.XER_SUMMARY_OVERFLOW,OperandSize.BYTE,Helpers.CRO_SUMMARY_OVERFLOW));
  }
}
