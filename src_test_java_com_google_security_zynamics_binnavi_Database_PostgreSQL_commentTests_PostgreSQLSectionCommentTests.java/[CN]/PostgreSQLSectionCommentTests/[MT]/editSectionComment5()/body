{
  final List<IComment> comments=section.getComments() == null ? new ArrayList<IComment>() : section.getComments();
  final IComment lastComment=comments.size() == 0 ? null : Iterables.getLast(comments);
  final IUser user=new UniqueTestUserGenerator(getProvider()).nextActiveUser();
  final String commentText=" SECTION COMMENT TEST BEFORE EDIT ";
  final Integer commentId=getProvider().appendSectionComment(section.getModule().getConfiguration().getId(),section.getId(),commentText,user.getUserId());
  final IComment newComment=new CComment(commentId,user,lastComment,commentText);
  final ArrayList<IComment> newComments=getProvider().loadCommentById(commentId);
  assertNotNull(newComments);
  assertEquals(comments.size() + 1,newComments.size());
  assertEquals(newComment,newComments.get(newComments.size() - 1));
  final String commentAfterEdit=" Section COMMENT TEST AFTER EDIT ";
  getProvider().editSectionComment(section.getModule().getConfiguration().getId(),section.getId(),commentId,user.getUserId(),commentAfterEdit);
  final ArrayList<IComment> commentsAfterEdit=getProvider().loadCommentById(commentId);
  assertEquals(commentAfterEdit,Iterables.getLast(commentsAfterEdit).getComment());
  assertEquals(commentsAfterEdit.size(),newComments.size());
}
