{
  final String query="SELECT e.id, gc.comment_id FROM " + CTableNames.GLOBAL_EDGE_COMMENTS_TABLE + " AS gc "+ " join "+ CTableNames.INSTRUCTIONS_TABLE+ " AS src_inst on gc.src_address = src_inst.address "+ "AND gc.src_module_id = src_inst.module_id "+ " join "+ CTableNames.INSTRUCTIONS_TABLE+ " AS dst_inst on gc.dst_address = dst_inst.address "+ "AND gc.dst_module_id = dst_inst.module_id "+ " join "+ CTableNames.CODENODE_INSTRUCTIONS_TABLE+ " AS src_nodes on src_nodes.address = gc.src_address AND src_nodes.position = 0 "+ "AND src_nodes.module_id = gc.src_module_id "+ " join "+ CTableNames.CODENODE_INSTRUCTIONS_TABLE+ " AS dst_nodes on dst_nodes.address = gc.dst_address AND dst_nodes.position = 0 "+ "AND dst_nodes.module_id = gc.dst_module_id "+ " join "+ CTableNames.EDGES_TABLE+ " AS e ON e.source_node_id = src_nodes.node_id AND e.target_node_id = dst_nodes.node_id "+ " join "+ CTableNames.NODES_TABLE+ " AS src_n ON e.source_node_id = src_n.id "+ " join "+ CTableNames.NODES_TABLE+ " AS dst_n ON e.target_node_id = dst_n.id "+ " WHERE src_n.view_id = "+ viewId+ " AND dst_n.view_id = "+ viewId;
  final HashMap<Integer,Integer> commentIdsToEdgeIds=new HashMap<Integer,Integer>();
  final HashMap<Integer,ArrayList<IComment>> edgeIdsToCommentArray=new HashMap<Integer,ArrayList<IComment>>();
  try {
    final ResultSet resultSet=provider.getConnection().executeQuery(query,true);
    try {
      while (resultSet.next()) {
        final int edgeId=resultSet.getInt("id");
        final int commentId=resultSet.getInt("comment_id");
        commentIdsToEdgeIds.put(commentId,edgeId);
      }
    }
  finally {
      resultSet.close();
    }
  }
 catch (  final SQLException exception) {
    throw new CouldntLoadDataException(exception);
  }
  if (!commentIdsToEdgeIds.isEmpty()) {
    final HashMap<Integer,ArrayList<IComment>> commentIdsToComments=PostgreSQLCommentFunctions.loadMultipleCommentsById(provider,commentIdsToEdgeIds.keySet());
    for (    final Entry<Integer,ArrayList<IComment>> commentIdToComment : commentIdsToComments.entrySet()) {
      edgeIdsToCommentArray.put(commentIdsToEdgeIds.get(commentIdToComment.getKey()),commentIdToComment.getValue());
    }
  }
  return edgeIdsToCommentArray;
}
