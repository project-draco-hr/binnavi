{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand4=instruction.getOperands().get(3).getRootNode().getChildren().get(0);
  final String sourceRegister1=(registerOperand1.getValue());
  final String sourceRegister2=(registerOperand2.getValue());
  final String sourceRegister3=(registerOperand3.getValue());
  final String sourceRegister4=(registerOperand4.getValue());
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize wd=OperandSize.WORD;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  final String carryBit=environment.getNextVariableString();
  final String operand1=environment.getNextVariableString();
  final String operand2=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  final String tmpVar4=environment.getNextVariableString();
  final String tmpVar5=environment.getNextVariableString();
  final String tmpVar6=environment.getNextVariableString();
  final String tmpVar7=environment.getNextVariableString();
  final String tmpVar8=environment.getNextVariableString();
  final String tmpVar9=environment.getNextVariableString();
  final String isLessCondition=environment.getNextVariableString();
  if (instruction.getMnemonic().contains("BB")) {
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister3,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister4,dw,operand2,16);
  }
 else   if (instruction.getMnemonic().contains("BT")) {
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister3,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister4,wd,String.valueOf(-16L),dw,tmpVar1));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar1,dw,operand2,16);
  }
 else   if (instruction.getMnemonic().contains("TB")) {
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister3,wd,String.valueOf(-16L),dw,tmpVar1));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar1,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister4,dw,operand2,16);
  }
 else   if (instruction.getMnemonic().contains("TB")) {
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister3,wd,String.valueOf(-16L),dw,tmpVar1));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar1,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister4,wd,String.valueOf(-16L),dw,tmpVar2));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar2,dw,operand2,16);
  }
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  instructions.add(ReilHelpers.createMul(baseOffset++,dw,operand1,dw,operand2,qw,tmpVar3));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,sourceRegister1,qw,tmpVar3,qw,tmpVar4));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar3,wd,String.valueOf(-31L),bt,tmpVar5));
  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar5,bt,String.valueOf(1L),bt,isLessCondition));
  instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0L),bt,isLessCondition,dw,tmpVar6));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar3,wd,String.valueOf(-32L),bt,tmpVar7));
  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar7,bt,String.valueOf(1L),bt,carryBit));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,tmpVar6,bt,carryBit,dw,tmpVar8));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,sourceRegister2,dw,tmpVar8,dw,tmpVar9));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar9,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister2));
}
