{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"sar");
  Preconditions.checkArgument(instruction.getOperands().size() == 2,"Error: Argument instruction is not a sar instruction (invalid number of operands)");
  final long baseOffset=instruction.getAddress().toLong() * 0x100;
  long offset=baseOffset;
  final List<? extends IOperandTree> operands=instruction.getOperands();
  final IOperandTree targetOperand=operands.get(0);
  final IOperandTree sourceOperand=operands.get(1);
  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);
  instructions.addAll(sourceResult.getInstructions());
  offset=baseOffset + instructions.size();
  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);
  instructions.addAll(targetResult.getInstructions());
  offset=baseOffset + instructions.size();
  final OperandSize sourceSize=sourceResult.getSize();
  final OperandSize targetSize=targetResult.getSize();
  final OperandSize resultSize=TranslationHelpers.getNextSize(sourceSize);
  final String sourceRegister=sourceResult.getRegister();
  final String targetRegister=targetResult.getRegister();
  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(sourceSize));
  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(sourceSize));
  final String modValue=String.valueOf(targetSize.getBitSize());
  final String shiftMask=environment.getNextVariableString();
  final String shiftMaskZero=environment.getNextVariableString();
  final String shiftMaskLessOne=environment.getNextVariableString();
  final String shiftMaskOne=environment.getNextVariableString();
  final String shiftMaskNeg=environment.getNextVariableString();
  final String result=environment.getNextVariableString();
  final String truncatedResult=environment.getNextVariableString();
  final String msbResult=environment.getNextVariableString();
  final String isPositive=environment.getNextVariableString();
  final String divisor=environment.getNextVariableString();
  final String divisionResult=environment.getNextVariableString();
  final String negateMask=environment.getNextVariableString();
  final String twoComplementResult=environment.getNextVariableString();
  final String shiftBit=environment.getNextVariableString();
  final String shiftedBitsMask=environment.getNextVariableString();
  final String shiftedBits=environment.getNextVariableString();
  final String shiftedBitsZero=environment.getNextVariableString();
  final String shiftedBitsNonZero=environment.getNextVariableString();
  final String shiftAmountMinOne=environment.getNextVariableString();
  final String isNegative=environment.getNextVariableString();
  final String roundTowNegInf=environment.getNextVariableString();
  final String cfBitMask=environment.getNextVariableString();
  final String cfBitResult=environment.getNextVariableString();
  final String tmpCf=environment.getNextVariableString();
  final Pair<String,String> targetRegister1Abs=Helpers.generateAbs(environment,offset,targetRegister,targetSize,instructions);
  final String targetRegister1Absolute=targetRegister1Abs.second();
  offset=baseOffset + instructions.size();
  final int delta=instructions.size();
  instructions.add(ReilHelpers.createMod(offset,sourceSize,sourceRegister,targetSize,modValue,targetSize,shiftMask));
  instructions.add(ReilHelpers.createBisz(offset + 1,targetSize,shiftMask,OperandSize.BYTE,shiftMaskZero));
  final String jmpEnd=String.format("%s.%s",instruction.getAddress().toLong(),delta + 39);
  instructions.add(ReilHelpers.createJcc(offset + 2,OperandSize.BYTE,shiftMaskZero,OperandSize.ADDRESS,jmpEnd));
  instructions.add(ReilHelpers.createUndef(offset + 3,OperandSize.BYTE,Helpers.AUXILIARY_FLAG));
  instructions.add(ReilHelpers.createSub(offset + 4,OperandSize.BYTE,shiftMask,OperandSize.BYTE,"1",OperandSize.BYTE,shiftAmountMinOne));
  instructions.add(ReilHelpers.createBsh(offset + 5,OperandSize.BYTE,"1",OperandSize.BYTE,shiftAmountMinOne,OperandSize.BYTE,cfBitMask));
  instructions.add(ReilHelpers.createAnd(offset + 6,targetSize,targetRegister,OperandSize.BYTE,cfBitMask,OperandSize.BYTE,cfBitResult));
  instructions.add(ReilHelpers.createBisz(offset + 7,OperandSize.BYTE,cfBitResult,OperandSize.BYTE,tmpCf));
  instructions.add(ReilHelpers.createXor(offset + 8,OperandSize.BYTE,"1",OperandSize.BYTE,tmpCf,OperandSize.BYTE,Helpers.CARRY_FLAG));
  instructions.add(ReilHelpers.createSub(offset + 9,targetSize,"1",targetSize,shiftMask,targetSize,shiftMaskLessOne));
  instructions.add(ReilHelpers.createBisz(offset + 10,targetSize,shiftMaskLessOne,OperandSize.BYTE,shiftMaskOne));
  instructions.add(ReilHelpers.createSub(offset + 11,targetSize,"0",targetSize,shiftMask,targetSize,shiftMaskNeg));
  instructions.add(ReilHelpers.createAnd(offset + 12,sourceSize,msbMask,targetSize,targetRegister,sourceSize,msbResult));
  instructions.add(ReilHelpers.createBisz(offset + 13,sourceSize,msbResult,OperandSize.BYTE,isPositive));
  instructions.add(ReilHelpers.createXor(offset + 14,OperandSize.BYTE,"1",OperandSize.BYTE,isPositive,OperandSize.BYTE,isNegative));
  instructions.add(ReilHelpers.createBsh(offset + 15,OperandSize.DWORD,"1",OperandSize.BYTE,shiftMask,OperandSize.DWORD,divisor));
  instructions.add(ReilHelpers.createDiv(offset + 16,targetSize,targetRegister1Absolute,OperandSize.DWORD,divisor,OperandSize.DWORD,divisionResult));
  instructions.add(ReilHelpers.createSub(offset + 17,OperandSize.BYTE,"0",OperandSize.BYTE,isNegative,OperandSize.DWORD,negateMask));
  instructions.add(ReilHelpers.createXor(offset + 18,OperandSize.DWORD,divisionResult,OperandSize.DWORD,negateMask,OperandSize.DWORD,result));
  final String jmpSkipTwosComplement=String.format("%s.%s",instruction.getAddress().toLong(),delta + 28);
  instructions.add(ReilHelpers.createJcc(offset + 19,OperandSize.BYTE,isPositive,OperandSize.ADDRESS,jmpSkipTwosComplement));
  instructions.add(ReilHelpers.createAdd(offset + 20,OperandSize.DWORD,result,OperandSize.BYTE,"1",OperandSize.DWORD,twoComplementResult));
  instructions.add(ReilHelpers.createBsh(offset + 21,OperandSize.BYTE,"1",targetSize,shiftMask,targetSize,shiftBit));
  instructions.add(ReilHelpers.createSub(offset + 22,targetSize,shiftBit,OperandSize.BYTE,"1",targetSize,shiftedBitsMask));
  instructions.add(ReilHelpers.createAnd(offset + 23,targetSize,targetRegister,targetSize,shiftedBitsMask,targetSize,shiftedBits));
  instructions.add(ReilHelpers.createBisz(offset + 24,targetSize,shiftedBits,OperandSize.BYTE,shiftedBitsZero));
  instructions.add(ReilHelpers.createXor(offset + 25,OperandSize.BYTE,"1",OperandSize.BYTE,shiftedBitsZero,OperandSize.BYTE,shiftedBitsNonZero));
  instructions.add(ReilHelpers.createAnd(offset + 26,OperandSize.BYTE,isNegative,OperandSize.BYTE,shiftedBitsNonZero,OperandSize.BYTE,roundTowNegInf));
  instructions.add(ReilHelpers.createSub(offset + 27,OperandSize.DWORD,twoComplementResult,OperandSize.BYTE,roundTowNegInf,targetSize,result));
  instructions.add(ReilHelpers.createAnd(offset + 28,resultSize,result,sourceSize,truncateMask,sourceSize,truncatedResult));
  final String jmpGoal=String.format("%s.%s",instruction.getAddress().toLong(),delta + 39);
  instructions.add(ReilHelpers.createJcc(offset + 29,OperandSize.BYTE,shiftMaskZero,OperandSize.ADDRESS,jmpGoal));
  instructions.add(ReilHelpers.createBisz(offset + 30,OperandSize.BYTE,isPositive,OperandSize.BYTE,Helpers.SIGN_FLAG));
  instructions.add(ReilHelpers.createBisz(offset + 31,sourceSize,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));
  final String jmpDontZeroOF=String.format("%s.%s",instruction.getAddress().toLong(),delta + 34);
  instructions.add(ReilHelpers.createJcc(offset + 32,OperandSize.BYTE,shiftMaskOne,OperandSize.ADDRESS,jmpDontZeroOF));
  instructions.add(ReilHelpers.createStr(offset + 33,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final String shiftCountZeroOrOne=environment.getNextVariableString();
  instructions.add(ReilHelpers.createOr(offset + 34,OperandSize.BYTE,shiftMaskOne,OperandSize.BYTE,shiftMaskZero,OperandSize.BYTE,shiftCountZeroOrOne));
  final String jmpSkipUndefOF=String.format("%s.%s",instruction.getAddress().toLong(),delta + 38);
  instructions.add(ReilHelpers.createJcc(offset + 35,OperandSize.BYTE,shiftCountZeroOrOne,OperandSize.ADDRESS,jmpSkipUndefOF));
  instructions.add(ReilHelpers.createUndef(offset + 36,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final String jmpGoal3=String.format("%s.%s",instruction.getAddress().toLong(),delta + 39);
  instructions.add(ReilHelpers.createJcc(offset + 37,OperandSize.BYTE,"1",OperandSize.ADDRESS,jmpGoal3));
  instructions.add(ReilHelpers.createStr(offset + 38,OperandSize.BYTE,"0",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));
  final int sizeBefore=instructions.size();
  Helpers.writeBack(environment,offset + 39,targetOperand,result,targetSize,targetResult.getAddress(),targetResult.getType(),instructions);
  final int sizeAfter=instructions.size();
  instructions.add(ReilHelpers.createNop((sizeAfter - sizeBefore - 1) + offset + 40));
}
