{
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"byte");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.IMMEDIATE_INTEGER,"2"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1);
  final IInstruction instruction=new MockInstruction("crset",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100L));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR0EQ"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR0LT"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR0GT"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR0SO"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR1EQ"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR1LT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR1GT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR1SO"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR2EQ"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR2LT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR2GT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR2SO"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR3EQ"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR3LT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR3GT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR3SO"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR4EQ"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR4LT"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR4GT"));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("CR4SO"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR5EQ"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR5LT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR5GT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR5SO"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR6EQ"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR6LT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR6GT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR6SO"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR7EQ"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR7LT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR7GT"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("CR7SO"));
  assertEquals(BigInteger.ZERO,BigInteger.valueOf(interpreter.getMemorySize()));
  assertEquals(33,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
}
