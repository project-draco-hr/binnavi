{
  assertEquals(7,m_graph.visibleNodeCount());
  assertEquals(89,NodeFunctions.getInvisibleNodes(m_graph).size());
  assertEquals(96,m_graph.getRawView().getNodeCount());
  final MockFunction function=new MockFunction(m_provider);
  final List<INaviInstruction> instructions=Lists.newArrayList((INaviInstruction)new MockInstruction(new CAddress(0x123456),"mov",new ArrayList<COperandTree>(),null,m_module));
  final CCodeNode codeNode=m_graph.getRawView().getContent().createCodeNode(function,instructions);
  assertEquals(8,m_graph.visibleNodeCount());
  assertEquals(89,NodeFunctions.getInvisibleNodes(m_graph).size());
  assertEquals(97,m_graph.getRawView().getNodeCount());
  final List<NaviNode> nodes=GraphHelpers.getNodes(m_graph);
  final NaviNode cnn=searchNode(nodes,codeNode);
  assertEquals(codeNode,cnn.getRawNode());
  assertTrue(codeNode.isVisible());
  assertEquals(codeNode.isVisible(),cnn.isVisible());
  codeNode.setVisible(false);
  assertFalse(codeNode.isVisible());
  assertEquals(codeNode.isVisible(),cnn.isVisible());
  codeNode.setVisible(true);
  assertTrue(codeNode.isVisible());
  assertEquals(codeNode.isVisible(),cnn.isVisible());
  assertFalse(codeNode.isSelected());
  assertEquals(codeNode.isSelected(),cnn.isSelected());
  codeNode.setSelected(false);
  assertFalse(codeNode.isSelected());
  assertEquals(codeNode.isSelected(),cnn.isSelected());
  codeNode.setSelected(true);
  assertTrue(codeNode.isSelected());
  assertEquals(codeNode.isSelected(),cnn.isSelected());
  assertEquals(codeNode.getColor(),cnn.getRealizer().getFillColor());
  codeNode.setColor(Color.GREEN);
  assertEquals(Color.GREEN,codeNode.getColor());
  assertEquals(codeNode.getColor(),cnn.getRealizer().getFillColor());
  codeNode.setX(100);
  assertEquals(100,codeNode.getX(),0.1);
  assertEquals(codeNode.getX(),cnn.getX(),0.1);
  codeNode.setY(200);
  assertEquals(200,codeNode.getY(),0.1);
  assertEquals(codeNode.getY(),cnn.getY(),0.1);
}
