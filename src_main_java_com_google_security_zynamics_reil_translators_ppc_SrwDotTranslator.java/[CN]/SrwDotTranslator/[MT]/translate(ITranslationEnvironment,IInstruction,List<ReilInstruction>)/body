{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"srw.");
  final IOperandTreeNode targetRegister=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode sourceRegister=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode shiftRegister=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  Long baseOffset=instruction.getAddress().toLong() * 0x100;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize bt=OperandSize.BYTE;
  final String shiftAmmount=environment.getNextVariableString();
  final String oneComp=environment.getNextVariableString();
  final String twoComp=environment.getNextVariableString();
  final String crTemp=environment.getNextVariableString();
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,shiftRegister.getValue(),dw,String.valueOf(0x3FL),dw,shiftAmmount));
  instructions.add(ReilHelpers.createXor(baseOffset++,dw,shiftRegister.getValue(),dw,String.valueOf(0xFFFFFFFFL),dw,oneComp));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,oneComp,dw,String.valueOf(1L),dw,twoComp));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister.getValue(),dw,twoComp,dw,targetRegister.getValue()));
  instructions.add(ReilHelpers.createBisz(baseOffset++,dw,targetRegister.getValue(),bt,Helpers.CR0_EQUAL));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,targetRegister.getValue(),dw,"-31",bt,Helpers.CR0_LESS_THEN));
  instructions.add(ReilHelpers.createOr(baseOffset++,bt,Helpers.CR0_EQUAL,bt,Helpers.CR0_LESS_THEN,bt,crTemp));
  instructions.add(ReilHelpers.createBisz(baseOffset++,bt,crTemp,bt,Helpers.CR0_GREATER_THEN));
  instructions.add(ReilHelpers.createStr(baseOffset,bt,Helpers.XER_SUMMARY_OVERFLOW,bt,Helpers.CRO_SUMMARY_OVERFLOW));
}
