{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand4=instruction.getOperands().get(3).getRootNode().getChildren().get(0);
  final String targetRegister=(registerOperand1.getValue());
  final String sourceRegister1=(registerOperand2.getValue());
  final String sourceRegister2=(registerOperand3.getValue());
  final String sourceRegister3=(registerOperand4.getValue());
  final OperandSize wd=OperandSize.WORD;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  final String tmpVar4=environment.getNextVariableString();
  final String value=environment.getNextVariableString();
  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  Helpers.signedMul(baseOffset,environment,instruction,instructions,dw,sourceRegister1,dw,sourceRegister2,qw,value);
  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister3,wd,String.valueOf(32),qw,tmpVar1));
  if (instruction.getMnemonic().contains("R")) {
    instructions.add(ReilHelpers.createAdd(baseOffset++,qw,value,dw,String.valueOf(0x80000000L),qw,tmpVar2));
    instructions.add(ReilHelpers.createAdd(baseOffset++,qw,tmpVar2,qw,tmpVar1,qw,tmpVar3));
  }
 else {
    instructions.add(ReilHelpers.createAdd(baseOffset++,qw,value,qw,tmpVar1,qw,tmpVar3));
  }
  instructions.add(ReilHelpers.createBsh(baseOffset++,qw,tmpVar3,wd,String.valueOf(-32),dw,tmpVar4));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar4,dw,String.valueOf(0xFFFFFFFFL),dw,targetRegister));
}
