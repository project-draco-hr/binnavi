{
  super("Instruction" + " " + ZyInstructionBuilder.buildInstructionLine(instruction,model.getGraph().getSettings(),new CDefaultModifier(model.getGraph().getSettings(),model.getDebuggerProvider())).first());
  final INaviCodeNode codeNode=(INaviCodeNode)node.getRawNode();
  final IDebugger debugger=CGraphDebugger.getDebugger(model.getDebuggerProvider(),instruction);
  if (debugger != null) {
    final INaviModule module=instruction.getModule();
    final UnrelocatedAddress instructionAddress=new UnrelocatedAddress(instruction.getAddress());
    add(CActionProxy.proxy(new CActionToggleBreakpoint(debugger.getBreakpointManager(),module,instructionAddress)));
    final BreakpointAddress relocatedAddress=new BreakpointAddress(module,instructionAddress);
    if (debugger.getBreakpointManager().hasBreakpoint(BreakpointType.REGULAR,relocatedAddress)) {
      add(CActionProxy.proxy(new CActionToggleBreakpointStatus(debugger.getBreakpointManager(),module,instructionAddress)));
    }
    addSeparator();
  }
  for (  final ICodeNodeExtension extension : extensions) {
    extension.extendInstruction(this,codeNode,instruction);
  }
  try {
    try {
      final JMenu operandsMenu=new COperandsMenu(codeNode,instruction,extensions);
      if (operandsMenu.getItemCount() != 0) {
        add(operandsMenu);
      }
    }
 catch (    final MaybeNullException exception) {
    }
  }
 catch (  final InternalTranslationException e) {
    CUtilityFunctions.logException(e);
  }
  addSeparator();
  final JMenu advancedMenu=new JMenu("Advanced");
  advancedMenu.add(CActionProxy.proxy(new CActionDeleteInstruction(model.getParent(),model.getGraph(),node,instruction)));
  advancedMenu.add(CActionProxy.proxy(new CActionSplitAfter(model.getGraph().getRawView(),codeNode,instruction)));
  advancedMenu.add(CActionProxy.proxy(new CActionShowReilCode(model.getParent(),instruction)));
  add(advancedMenu);
}
