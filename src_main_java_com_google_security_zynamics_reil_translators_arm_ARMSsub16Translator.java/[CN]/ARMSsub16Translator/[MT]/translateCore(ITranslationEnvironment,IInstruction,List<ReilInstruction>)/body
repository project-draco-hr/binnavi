{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final String targetRegister=(registerOperand1.getValue());
  final String sourceRegister1=(registerOperand2.getValue());
  final String sourceRegister2=(registerOperand3.getValue());
  final OperandSize bt=OperandSize.BYTE;
  final long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  new Processor(){
    @Override protected int getResultShiftDelta(){
      return 0;
    }
    @Override protected String[] process(    final long offset,    final String[] firstTwo,    final String[] secondTwo){
      final String diff1=environment.getNextVariableString();
      final String diff2=environment.getNextVariableString();
      final String trueDiff1=environment.getNextVariableString();
      final String trueDiff2=environment.getNextVariableString();
      final String tmpVar1=environment.getNextVariableString();
      final String tmpVar2=environment.getNextVariableString();
      long baseOffset=offset;
      Helpers.signedSub(baseOffset,environment,instruction,instructions,secondTwo[0],firstTwo[0],diff1,trueDiff1);
      baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
      Helpers.signedSub(baseOffset,environment,instruction,instructions,secondTwo[1],firstTwo[1],diff2,trueDiff2);
      baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
      instructions.add(ReilHelpers.createXor(baseOffset++,dw,trueDiff1,dw,String.valueOf(0xFFFFL),dw,tmpVar1));
      instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,String.valueOf(-15L),bt,"CPSR_GE_0"));
      instructions.add(ReilHelpers.createStr(baseOffset++,bt,"CPSR_GE_0",bt,"CPSR_GE_1"));
      instructions.add(ReilHelpers.createXor(baseOffset++,dw,trueDiff2,dw,String.valueOf(0xFFFFL),dw,tmpVar2));
      instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar2,dw,String.valueOf(-15L),bt,"CPSR_GE_2"));
      instructions.add(ReilHelpers.createStr(baseOffset++,bt,"CPSR_GE_2",bt,"CPSR_GE_3"));
      return new String[]{diff1,diff2};
    }
  }
.generate(environment,baseOffset,16,sourceRegister1,sourceRegister2,targetRegister,instructions);
}
