{
  final Boolean writeBack=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().size() == 1 ? true : false;
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode rootNode=instruction.getOperands().get(2).getRootNode();
  final String registerNodeValue1=registerOperand1.getValue();
  final String registerNodeValue2=registerOperand2.getValue();
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize dw=OperandSize.DWORD;
  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();
  final Pair<String,String> resultPair=AddressingModeTwoGenerator.generate(baseOffset,environment,instruction,instructions,rootNode);
  final String tmpAddress=resultPair.first();
  final String tmpAddress2=environment.getNextVariableString();
  final int registerNum=Helpers.getRegisterIndex(registerNodeValue1);
  if (((registerNum % 2) == 0) && (registerNum != 14)) {
    instructions.add(ReilHelpers.createLdm(baseOffset++,dw,tmpAddress,dw,registerNodeValue1));
    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,tmpAddress,bt,String.valueOf(4),dw,tmpAddress2));
    instructions.add(ReilHelpers.createLdm(baseOffset++,dw,tmpAddress2,dw,registerNodeValue2));
    if (writeBack) {
      instructions.add(ReilHelpers.createStr(baseOffset++,dw,tmpAddress2,dw,registerNodeValue1));
    }
  }
 else {
    instructions.add(ReilHelpers.createUnknown(baseOffset++));
  }
}
