{
switch (type) {
case DebugCommandType.RESP_ATTACH_SUCCESS:
case DebugCommandType.RESP_ATTACH_ERROR:
    return attachParser;
case DebugCommandType.RESP_BP_HIT:
  return breakpointHitParser;
case DebugCommandType.RESP_BP_REM_SUCCESS:
case DebugCommandType.RESP_BP_REM_ERROR:
return breakpointRemovedParser;
case DebugCommandType.RESP_BP_SET_SUCCESS:
case DebugCommandType.RESP_BP_SET_ERROR:
return breakpointSetParser;
case DebugCommandType.RESP_CANCEL_TARGET_SELECTION_SUCCESS:
return cancelTargetSelectionParser;
case DebugCommandType.RESP_DETACH_SUCCESS:
case DebugCommandType.RESP_DETACH_ERROR:
return detachParser;
case DebugCommandType.RESP_BPE_HIT:
return echoBreakpointHitParser;
case DebugCommandType.RESP_BPE_REM_SUCCESS:
case DebugCommandType.RESP_BPE_REM_ERROR:
return echoBreakpointRemovedParser;
case DebugCommandType.RESP_BPE_SET_SUCCESS:
case DebugCommandType.RESP_BPE_SET_ERROR:
return echoBreakpointSetParser;
case DebugCommandType.RESP_EXCEPTION_OCCURED:
return exceptionOccurredParser;
case DebugCommandType.RESP_LIST_FILES_SUCCESS:
case DebugCommandType.RESP_LIST_FILES_ERROR:
return listFilesParser;
case DebugCommandType.RESP_LIST_PROCESSES_SUCCESS:
return listProcessesParser;
case DebugCommandType.RESP_MEMMAP_SUCCESS:
case DebugCommandType.RESP_MEMMAP_ERROR:
return memoryMapParser;
case DebugCommandType.RESP_MODULE_LOADED:
return moduleLoadedParser;
case DebugCommandType.RESP_MODULE_UNLOADED:
return moduleUnloadedParser;
case DebugCommandType.RESP_PROCESS_CLOSED:
return processClosedParser;
case DebugCommandType.RESP_READ_MEMORY_SUCCESS:
case DebugCommandType.RESP_READ_MEMORY_ERROR:
return readMemoryParser;
case DebugCommandType.RESP_REGISTERS_SUCCESS:
case DebugCommandType.RESP_REGISTERS_ERROR:
return registersParser;
case DebugCommandType.RESP_REQUEST_TARGET:
return requestTargetParser;
case DebugCommandType.RESP_RESUME_SUCCESS:
case DebugCommandType.RESP_RESUME_ERROR:
return resumeParser;
case DebugCommandType.RESP_SEARCH_SUCCESS:
case DebugCommandType.RESP_SEARCH_ERROR:
return searchParser;
case DebugCommandType.RESP_SELECT_PROCESS_SUCCESS:
case DebugCommandType.RESP_SELECT_PROCESS_ERROR:
return selectProcessParser;
case DebugCommandType.RESP_SET_REGISTER_SUCCESS:
case DebugCommandType.RESP_SET_REGISTER_ERROR:
return setRegisterParser;
case DebugCommandType.RESP_SINGLE_STEP_SUCCESS:
case DebugCommandType.RESP_SINGLE_STEP_ERROR:
return singleStepParser;
case DebugCommandType.RESP_BPS_HIT:
return stepBreakpointHitParser;
case DebugCommandType.RESP_BPS_REM_SUCCESS:
case DebugCommandType.RESP_BPS_REM_ERROR:
return stepBreakpointRemovedParser;
case DebugCommandType.RESP_BPS_SET_SUCCESS:
case DebugCommandType.RESP_BPS_SET_ERROR:
return stepBreakpointSetParser;
case DebugCommandType.RESP_INFO:
return targetInformationParser;
case DebugCommandType.RESP_TERMINATE_SUCCESS:
case DebugCommandType.RESP_TERMINATE_ERROR:
return terminateParser;
case DebugCommandType.RESP_THREAD_CLOSED:
return threadClosedParser;
case DebugCommandType.RESP_THREAD_CREATED:
return threadCreatedParser;
case DebugCommandType.RESP_VALID_MEMORY_SUCCESS:
case DebugCommandType.RESP_VALID_MEMORY_ERROR:
return validatedMemoryParser;
case DebugCommandType.RESP_SELECT_FILE_SUCC:
case DebugCommandType.RESP_SELECT_FILE_ERR:
return selectedFileParser;
case DebugCommandType.RESP_HALTED_SUCCESS:
case DebugCommandType.RESP_HALTED_ERROR:
return haltParser;
case DebugCommandType.RESP_RESUME_THREAD_SUCC:
case DebugCommandType.RESP_RESUME_THREAD_ERR:
return resumeThreadParser;
case DebugCommandType.RESP_SUSPEND_THREAD_SUCC:
case DebugCommandType.RESP_SUSPEND_THREAD_ERR:
return suspendThreadParser;
case DebugCommandType.RESP_SET_BREAKPOINT_CONDITION_SUCC:
case DebugCommandType.RESP_SET_BREAKPOINT_CONDITION_ERR:
return breakpointConditionSetParser;
case DebugCommandType.RESP_WRITE_MEMORY_SUCC:
case DebugCommandType.RESP_WRITE_MEMORY_ERR:
return writeMemoryParser;
case DebugCommandType.RESP_SET_EXCEPTIONS_SUCC:
case DebugCommandType.RESP_SET_EXCEPTIONS_ERR:
return setExceptionSettingsParser;
case DebugCommandType.RESP_SET_DEBUGGER_EVENT_SETTINGS_SUCC:
case DebugCommandType.RESP_SET_DEBUG_EVENT_SETTINGS_ERR:
return setDebugEventSettingsParser;
case DebugCommandType.RESP_QUERY_DEBUGGER_EVENT_SETTINGS:
return queryDebuggerEventSettingsParser;
case DebugCommandType.RESP_PROCESS_START:
return processStartParser;
default :
throw new IllegalStateException(String.format("IE01085: Received unknown message %d",type));
}
}
