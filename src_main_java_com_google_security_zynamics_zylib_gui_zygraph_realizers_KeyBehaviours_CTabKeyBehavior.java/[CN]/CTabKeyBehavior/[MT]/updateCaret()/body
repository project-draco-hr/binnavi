{
  if (!isAltPressed() && !isCtrlPressed()) {
    int caretX=getCaretEndPosX();
    int caretY=getCaretMousePressedY();
    ZyLineContent lineContent=getLineContent(caretY);
    final IZyEditableObject editObject=lineContent.getLineFragmentObjectAt(caretX);
    final List<IZyEditableObject> editObjects=lineContent.getLineFragmentObjectList();
    IZyEditableObject nextEditObject=null;
    if (!isShiftPressed()) {
      if (editObject != null) {
        if (!isComment(caretX,caretY)) {
          final int editObjectIndex=lineContent.getLineFragmentObjectList().indexOf(editObject);
          if (editObjectIndex < (editObjects.size() - 1)) {
            nextEditObject=editObjects.get(editObjectIndex + 1);
          }
        }
      }
 else {
        for (        final IZyEditableObject obj : editObjects) {
          if (obj.getStart() > caretX) {
            nextEditObject=obj;
            break;
          }
        }
      }
      int tempY=caretY;
      if (isComment(caretX,caretY)) {
        final int lastCommentLine=getLabelContent().getLastLineIndexOfModelAt(tempY);
        final int noneCommentLine=getLabelContent().getNonPureCommentLineIndexOfModelAt(tempY);
        if (noneCommentLine != -1) {
          if (tempY < noneCommentLine) {
            tempY=noneCommentLine - 1;
          }
 else {
            tempY=lastCommentLine;
          }
        }
 else {
          tempY=getLabelContent().getLineCount() - 1;
        }
      }
      if (nextEditObject == null) {
        boolean first=true;
        while (((nextEditObject == null) && (tempY != caretY)) || first) {
          first=false;
          tempY=tempY == (getLabelContent().getLineCount() - 1) ? 0 : ++tempY;
          final ZyLineContent nextLineContent=getLineContent(tempY);
          final List<IZyEditableObject> nextEditObjects=nextLineContent.getLineFragmentObjectList();
          if (nextEditObjects.size() > 0) {
            nextEditObject=nextEditObjects.get(0);
          }
        }
      }
      if (nextEditObject != null) {
        caretX=nextEditObject.getStart();
        if (nextEditObject.isCommentDelimiter()) {
          caretX=nextEditObject.getEnd();
        }
        caretY=tempY;
        setCaret(caretX,caretX,caretY,caretX,caretX,caretY);
      }
    }
 else {
      if (editObject != null) {
        if (!isComment(caretX,caretY)) {
          final int editObjectIndex=lineContent.getLineFragmentObjectList().indexOf(editObject);
          if (editObjectIndex < 1) {
            nextEditObject=editObjects.get(editObjectIndex - 1);
          }
        }
      }
 else {
        for (int index=editObjects.size() - 1; index >= 0; --index) {
          final IZyEditableObject obj=editObjects.get(index);
          if (obj.getEnd() < caretX) {
            nextEditObject=obj;
            break;
          }
        }
      }
      int tempY=caretY;
      if (isComment(caretX,caretY)) {
        final int firstCommentLine=getLabelContent().getFirstLineIndexOfModelAt(tempY);
        final int noneCommentLine=getLabelContent().getNonPureCommentLineIndexOfModelAt(tempY);
        if (noneCommentLine != -1) {
          if (tempY < noneCommentLine) {
            tempY=firstCommentLine;
          }
 else {
            tempY=noneCommentLine;
          }
        }
      }
      if (nextEditObject == null) {
        boolean first=true;
        while (((nextEditObject == null) && (tempY != caretY)) || first) {
          first=false;
          tempY=tempY == 0 ? getLabelContent().getLineCount() - 1 : --tempY;
          final ZyLineContent nextLineContent=getLineContent(tempY);
          final List<IZyEditableObject> nextEditObjects=nextLineContent.getLineFragmentObjectList();
          if (nextEditObjects.size() > 0) {
            nextEditObject=nextEditObjects.get(nextEditObjects.size() - 1);
          }
        }
      }
      if (nextEditObject != null) {
        caretX=nextEditObject.getStart();
        if (nextEditObject.isCommentDelimiter()) {
          caretX=nextEditObject.getEnd();
        }
        caretY=tempY;
        if (isComment(caretX,caretY)) {
          final int firstCommentLine=getLabelContent().getFirstLineIndexOfModelAt(tempY);
          final int noneCommentLine=getLabelContent().getNonPureCommentLineIndexOfModelAt(tempY);
          if ((caretY <= noneCommentLine) || (noneCommentLine < 0)) {
            caretY=firstCommentLine;
          }
 else {
            caretY=noneCommentLine;
          }
          lineContent=getLineContent(caretY);
          nextEditObject=lineContent.getLineFragmentObjectAt(caretX);
          if ((nextEditObject != null) && nextEditObject.isCommentDelimiter()) {
            caretX=nextEditObject.getEnd();
          }
        }
        setCaret(caretX,caretX,caretY,caretX,caretX,caretY);
      }
    }
  }
}
