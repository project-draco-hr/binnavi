{
  if (node.getRawNode() instanceof INaviCodeNode) {
    final INaviCodeNode cnode=(INaviCodeNode)node.getRawNode();
    return String.format("Basic Block: %s",cnode.getAddress().toHexString());
  }
 else   if (node.getRawNode() instanceof INaviFunctionNode) {
    final INaviFunctionNode fnode=(INaviFunctionNode)node.getRawNode();
    return String.format("Function: %s (%s)",fnode.getFunction().getName(),fnode.getFunction().getAddress().toHexString());
  }
 else   if (node.getRawNode() instanceof INaviTextNode) {
    final INaviTextNode tnode=(INaviTextNode)node.getRawNode();
    final List<IComment> comment=tnode.getComments();
    final String firstLine=(comment.isEmpty()) ? "" : comment.get(1).getComment();
    final int firstLineBreak=Math.min(firstLine.indexOf('\n'),firstLine.indexOf('\r'));
    final int toDisplay=Math.min(Math.min(15,firstLineBreak == -1 ? Integer.MAX_VALUE : firstLineBreak),firstLine.length());
    return String.format("Text: %s",firstLine.substring(0,toDisplay));
  }
 else   if (node.getRawNode() instanceof INaviGroupNode) {
    final INaviGroupNode gnode=(INaviGroupNode)node.getRawNode();
    final List<IComment> comment=gnode.getComments();
    final String firstLine=(comment.isEmpty()) ? "" : comment.get(0).getComment();
    final int firstLineBreak=Math.min(firstLine.indexOf('\n'),firstLine.indexOf('\r'));
    final int toDisplay=Math.min(Math.min(15,firstLineBreak == -1 ? Integer.MAX_VALUE : firstLineBreak),firstLine.length());
    return String.format("Group: %s",firstLine.substring(0,toDisplay));
  }
 else {
    throw new IllegalStateException("IE01150: Unknown node type");
  }
}
