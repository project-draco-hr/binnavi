{
  Preconditions.checkNotNull(node,"Error: Node argument can not be null");
  if (node instanceof CodeNode) {
    final List<INaviInstruction> instructionsList=new ArrayList<INaviInstruction>();
    for (    final Instruction instruction : ((CodeNode)node).getInstructions()) {
      Preconditions.checkNotNull(instruction,"Error: Instruction list contains a null-element");
      instructionsList.add(instruction.getNative());
    }
    CCodeNode newNode;
    try {
      newNode=naviView.getContent().createCodeNode(((INaviCodeNode)node.getNative()).getParentFunction(),instructionsList);
    }
 catch (    final MaybeNullException e) {
      newNode=naviView.getContent().createCodeNode(null,instructionsList);
    }
    adjustAttributes(node,newNode);
    return cachedNodes.get(newNode);
  }
 else   if (node instanceof FunctionNode) {
    final CFunctionNode newNode=naviView.getContent().createFunctionNode(((INaviFunctionNode)node.getNative()).getFunction());
    adjustAttributes(node,newNode);
    return cachedNodes.get(newNode);
  }
 else   if (node instanceof TextNode) {
    final CTextNode newNode=naviView.getContent().createTextNode(((TextNode)node).getComments());
    adjustAttributes(node,newNode);
    return cachedNodes.get(newNode);
  }
 else   if (node instanceof GroupNode) {
    throw new IllegalStateException("Group nodes can not be cloned");
  }
 else {
    throw new IllegalStateException("Error: Unknown node type");
  }
}
