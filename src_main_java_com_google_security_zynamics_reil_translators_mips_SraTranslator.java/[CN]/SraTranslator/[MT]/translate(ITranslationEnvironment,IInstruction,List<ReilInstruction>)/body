{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"sra");
  final Triple<IOperandTree,IOperandTree,IOperandTree> operands=OperandLoader.loadDuplicateFirst(instruction);
  final String rd=operands.first().getRootNode().getChildren().get(0).getValue();
  final String rt=operands.second().getRootNode().getChildren().get(0).getValue();
  final String sa=operands.third().getRootNode().getChildren().get(0).getValue();
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  final long baseOffset=ReilHelpers.toReilAddress(instruction.getAddress()).toLong();
  long offset=baseOffset;
  final String tempOperand1=environment.getNextVariableString();
  final String tempOperand2=environment.getNextVariableString();
  final String tempOperand3=environment.getNextVariableString();
  final String tempOperand4=environment.getNextVariableString();
  instructions.add(ReilHelpers.createBsh(offset++,dw,String.valueOf(0x80000000L),dw,"-" + sa,dw,tempOperand1));
  instructions.add(ReilHelpers.createBsh(offset++,dw,rt,dw,"-" + sa,dw,tempOperand2));
  instructions.add(ReilHelpers.createXor(offset++,dw,tempOperand1,dw,tempOperand2,dw,tempOperand3));
  instructions.add(ReilHelpers.createSub(offset++,dw,tempOperand3,dw,tempOperand1,qw,tempOperand4));
  instructions.add(ReilHelpers.createAnd(offset,qw,tempOperand4,dw,String.valueOf(0xFFFFFFFFL),dw,rd));
}
