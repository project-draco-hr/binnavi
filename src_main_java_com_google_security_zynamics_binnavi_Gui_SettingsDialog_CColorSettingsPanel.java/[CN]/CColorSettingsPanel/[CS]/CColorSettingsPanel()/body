{
  super(new BorderLayout());
  final JPanel mainPanel=new JPanel(new BorderLayout());
  final JPanel innerMainPanel=new JPanel(new GridBagLayout());
  final JPanel functionTypeColorPanel=new JPanel(new GridLayout(5,1,3,3));
  final ColorsConfigItem colors=ConfigManager.instance().getColorSettings();
  m_normalFunctionColorPanel=buildRow(functionTypeColorPanel,"Normal Function" + ":","Color used to paint normal functions in callgraphs and view tables",new ColorPanel(colors.getNormalFunctionColor(),true,true),false);
  m_importFunctionColorPanel=buildRow(functionTypeColorPanel,"Imported Function" + ":","Color used to paint imported functions in callgraphs and view tables",new ColorPanel(colors.getImportedFunctionColor(),true,true),false);
  m_libraryFunctionColorPanel=buildRow(functionTypeColorPanel,"Library Function" + ":","Color used to paint library functions in callgraphs and view tables",new ColorPanel(colors.getLibraryFunctionColor(),true,true),false);
  m_thunkFunctionColorPanel=buildRow(functionTypeColorPanel,"Thunk Function" + ":","Color used to paint thunk functions in callgraphs and view tables",new ColorPanel(colors.getThunkFunctionColor(),true,true),false);
  m_adjustorThunkFunctionColorPanel=buildRow(functionTypeColorPanel,"Unknown Function" + ":","Color used to paint thunk adjustor functions in callgraphs and view tables",new ColorPanel(colors.getAdjustorThunkFunctionColor(),true,true),true);
  functionTypeColorPanel.setBorder(new TitledBorder("Function Colors"));
  final JPanel instructionColorPanel=new JPanel(new GridLayout(11,1,3,3));
  instructionColorPanel.setBorder(new TitledBorder("Instruction Colors"));
  m_addressColorPanel=buildRow(instructionColorPanel,"Addresses" + ":","Color used to paint addresses in graphs",new ColorPanel(colors.getAddressColor(),true,true),false);
  m_mnemonicColorPanel=buildRow(instructionColorPanel,"Mnemonics" + ":","Color used to paint mnemonics in graphs",new ColorPanel(colors.getMnemonicColor(),true,true),false);
  m_literalsColorPanel=buildRow(instructionColorPanel,"Immediates" + ":","Color used to paint immediate values in graphs",new ColorPanel(colors.getImmediateColor(),true,true),false);
  m_registersColorPanel=buildRow(instructionColorPanel,"Registers" + ":","Color used to paint registers in graphs",new ColorPanel(colors.getRegisterColor(),true,true),false);
  m_functionColorPanel=buildRow(instructionColorPanel,"Functions" + ":","Color used to paint function references in graphs",new ColorPanel(colors.getFunctionColor(),true,true),false);
  m_variableColorPanel=buildRow(instructionColorPanel,"Variables" + ":","Color used to paint variables in graphs",new ColorPanel(colors.getVariableColor(),true,true),false);
  m_expressionListColorPanel=buildRow(instructionColorPanel,"Expression List" + ":","Color used to paint expression lists in graphs",new ColorPanel(colors.getExpressionListColor(),true,true),false);
  m_memoryReferencesColorPanel=buildRow(instructionColorPanel,"Memory References" + ":","Color used to paint memory references in graphs",new ColorPanel(colors.getMemRefColor(),true,true),false);
  m_operatorColorPanel=buildRow(instructionColorPanel,"Operators" + ":","Color used to paint operators in graphs",new ColorPanel(colors.getOperatorColor(),true,true),false);
  m_operandSeparatorColorPanel=buildRow(instructionColorPanel,"Operand Separators" + ":","Color used to paint operand separators in graphs",new ColorPanel(colors.getOperandSeparatorColor(),true,true),false);
  m_prefixColorPanel=buildRow(instructionColorPanel,"Prefixes" + ":","Color used to paint prefixes in graphs",new ColorPanel(colors.getPrefixColor(),true,true),true);
  final JPanel graphColorPanel=new JPanel(new GridLayout(8,1,3,3));
  graphColorPanel.setBorder(new TitledBorder("Graph Colors"));
  m_basicblocksPanel=buildRow(graphColorPanel,"Basic Blocks" + ":","Color used to paint basic blocks in graphs",new ColorPanel(colors.getBasicBlocksColor(),true,true),false);
  m_unconditionalJumpsPanel=buildRow(graphColorPanel,"Unconditional Jumps" + ":","Color of unconditional jumps",new ColorPanel(colors.getUnconditionalJumpColor(),true,true),false);
  m_conditionalJumpsTakenPanel=buildRow(graphColorPanel,"Conditional Jumps (Taken)" + ":","Color of conditional jumps which are taken",new ColorPanel(colors.getConditionalJumpTrueColor(),true,true),false);
  m_conditionalJumpsNotTakenPanel=buildRow(graphColorPanel,"Conditional Jumps (Not taken)" + ":","Color of conditional jumps which are not taken",new ColorPanel(colors.getConditionalJumpFalseColor(),true,true),false);
  m_enterInlinedJumpsPanel=buildRow(graphColorPanel,"Entering inlined functions" + ":","Color of edges used to enter inlined functions",new ColorPanel(colors.getEnterInlinedJumpColor(),true,true),false);
  m_leaveInlinedJumpsPanel=buildRow(graphColorPanel,"Leaving inlined functions" + ":","Color of edges used to leave inlined functions",new ColorPanel(colors.getLeaveInlinedJumpColor(),true,true),true);
  m_switchPanel=buildRow(graphColorPanel,"Switches" + ":","Color of edges that belong to switch statements",new ColorPanel(colors.getSwitchJumpColor(),true,true),true);
  m_textJumpsPanel=buildRow(graphColorPanel,"Edges to comment nodes" + ":","Color of edges that connect comment nodes to other nodes",new ColorPanel(colors.getTextEdgeColor(),true,true),true);
  final JPanel debuggerColorPanel=new JPanel(new GridLayout(8,1,3,3));
  final DebugColorsConfigItem debuggerColors=ConfigManager.instance().getDebuggerColorSettings();
  m_activeLineColorPanel=buildRow(debuggerColorPanel,"Active Line" + ":","Color used to show the line at the program counter while debugging.",new ColorPanel(debuggerColors.getActiveLine(),true,true),false);
  m_activeBreakpointColorPanel=buildRow(debuggerColorPanel,"Active Breakpoint" + ":","Color used to show active breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointActive(),true,true),false);
  m_inactiveBreakpointColorPanel=buildRow(debuggerColorPanel,"Inactive Breakpoint" + ":","Color used to show inactive breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointInactive(),true,true),false);
  m_enabledBreakpointColorPanel=buildRow(debuggerColorPanel,"Enabled Breakpoint" + ":","Color used to show enabled breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointEnabled(),true,true),false);
  m_disabledBreakpointColorPanel=buildRow(debuggerColorPanel,"Disabled Breakpoint" + ":","Color used to show disabled breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointDisabled(),true,true),false);
  m_hitBreakpointColorPanel=buildRow(debuggerColorPanel,"Hit Breakpoint" + ":","Color used to show hit breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointHit(),true,true),false);
  m_invalidBreakpointColorPanel=buildRow(debuggerColorPanel,"Invalid Breakpoint" + ":","Color used to show invalid breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointInvalid(),true,true),false);
  m_deletingBreakpointColorPanel=buildRow(debuggerColorPanel,"Deleting Breakpoint" + ":","Color used to show deleting breakpoints while debugging.",new ColorPanel(debuggerColors.getBreakpointDeleting(),true,true),true);
  debuggerColorPanel.setBorder(new TitledBorder("Debugger Colors"));
  final GridBagConstraints constraints=new GridBagConstraints();
  constraints.gridx=0;
  constraints.gridy=0;
  constraints.anchor=GridBagConstraints.FIRST_LINE_START;
  constraints.weightx=1;
  constraints.fill=GridBagConstraints.HORIZONTAL;
  innerMainPanel.add(functionTypeColorPanel,constraints);
  constraints.gridy=1;
  innerMainPanel.add(instructionColorPanel,constraints);
  constraints.gridy=2;
  innerMainPanel.add(graphColorPanel,constraints);
  constraints.gridy=3;
  innerMainPanel.add(debuggerColorPanel,constraints);
  mainPanel.add(innerMainPanel,BorderLayout.NORTH);
  add(new JScrollPane(mainPanel));
}
