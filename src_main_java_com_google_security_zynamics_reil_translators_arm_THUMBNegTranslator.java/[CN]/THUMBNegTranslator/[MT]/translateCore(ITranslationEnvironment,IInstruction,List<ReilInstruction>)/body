{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final String sourceRegister1=(registerOperand1.getValue());
  final String sourceRegister2=(registerOperand2.getValue());
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize wd=OperandSize.WORD;
  final OperandSize dw=OperandSize.DWORD;
  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0L),dw,sourceRegister2,dw,tmpVar1));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));
  if (instruction.getMnemonic().contains("NEGS")) {
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister1,wd,String.valueOf(-31),bt,"N"));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,sourceRegister1,bt,"Z"));
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,String.valueOf(-32L),dw,tmpVar2));
    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar2,bt,"C"));
    Helpers.subOverflow(baseOffset,environment,instruction,instructions,dw,String.valueOf(0),dw,sourceRegister2,dw,tmpVar1,"V",32);
  }
}
