{
  if (sourceNode == destinationNode) {
    final ArrayList<NodeType> nodeList=new ArrayList<>();
    nodeList.add(sourceNode);
    return new HashSet<>(nodeList);
  }
  final ArrayList<NodeType> upwardsNodes=new ArrayList<>();
  upwardsNodes.add(destinationNode);
  final Set<NodeType> resolveUpwards=new HashSet<>(upwardsNodes);
  final Stack<NodeType> upwardsWorkingList=new Stack<>();
  upwardsWorkingList.push(sourceNode);
  while (!upwardsWorkingList.empty()) {
    final NodeType currentNode=upwardsWorkingList.pop();
    resolveUpwards.add(currentNode);
    for (    final NodeType currentParentNode : currentNode.getParents()) {
      if (!resolveUpwards.contains(currentParentNode)) {
        resolveUpwards.add(currentParentNode);
        upwardsWorkingList.push(currentParentNode);
      }
    }
  }
  final ArrayList<NodeType> downwardsNodes=new ArrayList<>();
  final Set<NodeType> resolveDownwards=new HashSet<>(downwardsNodes);
  final Stack<NodeType> downwardsWorkingList=new Stack<>();
  downwardsWorkingList.push(destinationNode);
  while (!downwardsWorkingList.empty()) {
    final NodeType currentNode=downwardsWorkingList.pop();
    resolveDownwards.add(currentNode);
    for (    final NodeType currentChildNode : currentNode.getChildren()) {
      if (!resolveDownwards.contains(currentChildNode)) {
        resolveDownwards.add(currentChildNode);
        downwardsWorkingList.push(currentChildNode);
      }
    }
  }
  resolveUpwards.retainAll(resolveDownwards);
  return resolveUpwards;
}
