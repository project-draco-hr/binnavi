{
  if (m_wasSelection) {
    return;
  }
  final int x=getCaretEndPosX();
  final int y=getCaretMouseReleasedY();
  final ZyLineContent lineContent=getLineContent(y);
  final IZyEditableObject editableObject=lineContent.getLineFragmentObjectAt(x);
  if (editableObject == null) {
    return;
  }
  if (isComment(x,y)) {
    if (editableObject.isCommentDelimiter()) {
      return;
    }
    final Point commentEndPoint=getMultiCommentEndPoint(x,y);
    if (y == commentEndPoint.y) {
      if ((x == commentEndPoint.x) || ((x == (commentEndPoint.x - 1)) && lineContent.getText().endsWith("\n"))) {
        return;
      }
    }
    final int textCursor=x - editableObject.getStart();
    final String text=lineContent.getText().substring(editableObject.getStart(),editableObject.getEnd());
    String changedText=text;
    if (textCursor < text.length()) {
      changedText=String.format("%s%s",text.substring(0,textCursor),text.substring(textCursor + 1));
    }
 else     if (isComment(x,y)) {
      if (y < (getLabelContent().getLineCount() - 1)) {
        final ZyLineContent nextLineContent=getLineContent(y + 1);
        if (nextLineContent.getLineObject() == lineContent.getLineObject()) {
          final IZyEditableObject object=nextLineContent.getLineFragmentObjectAt(0);
          if ((object != null) && object.isCommentDelimiter()) {
            changedText=text.substring(0,textCursor - 1);
          }
        }
      }
    }
    if (isComment(x,y)) {
      changedText=getMultilineComment(y,changedText);
      if (!changedText.endsWith("\r")) {
        changedText+="\r";
      }
    }
    editableObject.update(changedText);
    if (isLabelComment(y)) {
      lineContent.getLineObject().update(changedText);
    }
 else     if (isAboveLineComment(y)) {
      lineContent.getLineObject().updateComment(changedText,ECommentPlacement.ABOVE_LINE);
    }
 else     if (isBehindLineComment(x,y)) {
      lineContent.getLineObject().updateComment(changedText,ECommentPlacement.BEHIND_LINE);
    }
    getLabelContent().getLineEditor().recreateLabelLines(getLabelContent(),lineContent.getLineObject().getPersistentModel());
  }
 else {
    throw new RuntimeException("Not implemented yet.");
  }
}
