{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final String targetRegister=(registerOperand1.getValue());
  final String sourceRegister=(registerOperand2.getValue());
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize wd=OperandSize.WORD;
  final OperandSize bt=OperandSize.BYTE;
  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();
  final String notCFlag=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  final String tmpVar4=environment.getNextVariableString();
  instructions.add(ReilHelpers.createBisz(baseOffset++,bt,"C",bt,notCFlag));
  instructions.add(ReilHelpers.createSub(baseOffset++,dw,targetRegister,bt,notCFlag,dw,tmpVar1));
  instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar1,bt,sourceRegister,dw,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar2,dw,String.valueOf(0xFFFFFFFFL),dw,targetRegister));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,targetRegister,wd,String.valueOf(-31),bt,"N"));
  instructions.add(ReilHelpers.createBisz(baseOffset++,dw,targetRegister,bt,"Z"));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar2,wd,String.valueOf(-31L),bt,tmpVar3));
  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar3,bt,String.valueOf(1L),bt,tmpVar4));
  instructions.add(ReilHelpers.createBisz(baseOffset++,bt,tmpVar4,bt,"C"));
  Helpers.subOverflow(baseOffset,environment,instruction,instructions,dw,tmpVar1,bt,sourceRegister,dw,tmpVar2,"V",32);
}
