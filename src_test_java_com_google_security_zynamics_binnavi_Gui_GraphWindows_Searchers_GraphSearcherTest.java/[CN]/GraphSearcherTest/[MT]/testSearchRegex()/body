{
  final ZyNodeRealizer<NaviNode> r=new ZyNormalNodeRealizer<NaviNode>(m_content);
  final NaviNode m_node1=new NaviNode(m_ynode,r,m_codeNode1);
  final GraphSearcher searcher=new GraphSearcher();
  searcher.getSettings().setRegEx(true);
  m_content.addLineContent(new ZyLineContent("Hello my Test",null));
  searcher.search(Lists.newArrayList(m_node1),new ArrayList<NaviEdge>(),"my[^s]*");
  assertEquals(m_node1,searcher.getCursor().current().getObject());
  assertEquals(0,searcher.getCursor().current().getLine());
  assertEquals(6,searcher.getCursor().current().getPosition());
  assertEquals(5,searcher.getCursor().current().getLength());
  searcher.search(Lists.newArrayList(m_node1),new ArrayList<NaviEdge>(),"my.*");
  assertEquals(m_node1,searcher.getCursor().current().getObject());
  assertEquals(0,searcher.getCursor().current().getLine());
  assertEquals(6,searcher.getCursor().current().getPosition());
  assertEquals(7,searcher.getCursor().current().getLength());
  searcher.getSettings().setCaseSensitive(true);
  searcher.search(Lists.newArrayList(m_node1),new ArrayList<NaviEdge>(),"my[^t]*");
  assertEquals(m_node1,searcher.getCursor().current().getObject());
  assertEquals(0,searcher.getCursor().current().getLine());
  assertEquals(6,searcher.getCursor().current().getPosition());
  assertEquals(6,searcher.getCursor().current().getLength());
}
