{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"rotrv");
  final Triple<IOperandTree,IOperandTree,IOperandTree> operands=OperandLoader.loadDuplicateFirst(instruction);
  final String rd=operands.first().getRootNode().getChildren().get(0).getValue();
  final String rt=operands.second().getRootNode().getChildren().get(0).getValue();
  final String rs=operands.third().getRootNode().getChildren().get(0).getValue();
  final OperandSize dw=OperandSize.DWORD;
  final String lowShiftRegisterBits=environment.getNextVariableString();
  final String lowRotateBits=environment.getNextVariableString();
  final String highRotateBits=environment.getNextVariableString();
  final String temporaryRotateResult=environment.getNextVariableString();
  final String negativeRt=environment.getNextVariableString();
  final String negativeShiftValue=environment.getNextVariableString();
  final long baseOffset=ReilHelpers.toReilAddress(instruction.getAddress()).toLong();
  long offset=baseOffset;
  instructions.add(ReilHelpers.createAnd(offset++,dw,rs,dw,String.valueOf(0x1FL),dw,lowShiftRegisterBits));
  instructions.add(ReilHelpers.createSub(offset++,dw,String.valueOf(0L),dw,rs,dw,negativeRt));
  instructions.add(ReilHelpers.createSub(offset++,dw,String.valueOf(32L),dw,rs,dw,negativeShiftValue));
  instructions.add(ReilHelpers.createBsh(offset++,dw,rt,dw,negativeRt,dw,lowRotateBits));
  instructions.add(ReilHelpers.createBsh(offset++,dw,rt,dw,negativeShiftValue,dw,highRotateBits));
  instructions.add(ReilHelpers.createOr(offset++,dw,lowRotateBits,dw,highRotateBits,dw,temporaryRotateResult));
  instructions.add(ReilHelpers.createAnd(offset++,dw,temporaryRotateResult,dw,String.valueOf(0xFFFFFFFFL),dw,rd));
}
