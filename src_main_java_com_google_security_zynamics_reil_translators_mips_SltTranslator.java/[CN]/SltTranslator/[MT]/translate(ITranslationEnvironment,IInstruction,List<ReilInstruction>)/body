{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"slt");
  final Triple<IOperandTree,IOperandTree,IOperandTree> operands=OperandLoader.loadDuplicateFirst(instruction);
  final String targetRegister=operands.first().getRootNode().getChildren().get(0).getValue();
  final String sourceRegister1=operands.second().getRootNode().getChildren().get(0).getValue();
  final String sourceRegister2=operands.third().getRootNode().getChildren().get(0).getValue();
  final OperandSize dw=OperandSize.DWORD;
  final long baseOffset=ReilHelpers.toReilAddress(instruction.getAddress()).toLong();
  long offset=baseOffset;
  final String subtractedValue=environment.getNextVariableString();
  final String temporaryResultOne=environment.getNextVariableString();
  final String temporaryResultTwo=environment.getNextVariableString();
  final String xoredValue=environment.getNextVariableString();
  final String result=environment.getNextVariableString();
  instructions.add(ReilHelpers.createSub(offset++,dw,sourceRegister1,dw,sourceRegister2,dw,subtractedValue));
  instructions.add(ReilHelpers.createXor(offset++,dw,sourceRegister1,dw,sourceRegister2,dw,xoredValue));
  instructions.add(ReilHelpers.createXor(offset++,dw,subtractedValue,dw,xoredValue,dw,temporaryResultOne));
  instructions.add(ReilHelpers.createAnd(offset++,dw,temporaryResultOne,dw,xoredValue,dw,temporaryResultTwo));
  instructions.add(ReilHelpers.createXor(offset++,dw,subtractedValue,dw,temporaryResultTwo,dw,result));
  instructions.add(ReilHelpers.createBsh(offset++,dw,result,dw,String.valueOf(-31L),dw,targetRegister));
}
