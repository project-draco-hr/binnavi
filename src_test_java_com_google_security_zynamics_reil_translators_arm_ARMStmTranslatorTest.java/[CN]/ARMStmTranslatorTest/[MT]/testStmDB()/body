{
  interpreter.setRegister("R0",BigInteger.valueOf(0x0000807CL),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R1",BigInteger.valueOf(0x000080CCL),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R2",BigInteger.valueOf(0x00000014L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R3",BigInteger.valueOf(0x00000002L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R4",BigInteger.valueOf(0x00008124L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R5",BigInteger.valueOf(0x000096A0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R6",BigInteger.valueOf(0x00000000L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R7",BigInteger.valueOf(0x00000000L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R8",BigInteger.valueOf(0x00000000L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R9",BigInteger.valueOf(0x00000000L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R10",BigInteger.valueOf(0x000095A0L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("R11",BigInteger.valueOf(0x00000000L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister(("SP"),BigInteger.valueOf(0x00000400L),dw,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("C",BigInteger.ONE,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("N",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("Z",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("V",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  interpreter.setRegister("Q",BigInteger.ZERO,bt,ReilRegisterStatus.DEFINED);
  final MockOperandTree operandTree1=new MockOperandTree();
  operandTree1.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree1.root.m_children.add(new MockOperandTreeNode(ExpressionType.OPERATOR,"!"));
  operandTree1.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,("SP")));
  final MockOperandTree operandTree2=new MockOperandTree();
  operandTree2.root=new MockOperandTreeNode(ExpressionType.SIZE_PREFIX,"b4");
  operandTree2.root.m_children.add(new MockOperandTreeNode(ExpressionType.EXPRESSION_LIST,"{"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R4"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R5"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R6"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R7"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R8"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R9"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R10"));
  operandTree2.root.getChildren().get(0).m_children.add(new MockOperandTreeNode(ExpressionType.REGISTER,"R11"));
  final List<MockOperandTree> operands=Lists.newArrayList(operandTree1,operandTree2);
  final IInstruction instruction=new MockInstruction("STMDB",operands);
  translator.translate(environment,instruction,instructions);
  interpreter.interpret(TestHelpers.createMapping(instructions),BigInteger.valueOf(0x100L));
  assertEquals(BigInteger.valueOf(0x0000807CL),interpreter.getVariableValue("R0"));
  assertEquals(BigInteger.valueOf(0x000080CCL),interpreter.getVariableValue("R1"));
  assertEquals(BigInteger.valueOf(0x00000014L),interpreter.getVariableValue("R2"));
  assertEquals(BigInteger.valueOf(0x00000002L),interpreter.getVariableValue("R3"));
  assertEquals(BigInteger.valueOf(0x00008124L),interpreter.getVariableValue("R4"));
  assertEquals(BigInteger.valueOf(0x000096A0L),interpreter.getVariableValue("R5"));
  assertEquals(BigInteger.valueOf(0x00000000L),interpreter.getVariableValue("R6"));
  assertEquals(BigInteger.valueOf(0x00000000L),interpreter.getVariableValue("R7"));
  assertEquals(BigInteger.valueOf(0x00000000L),interpreter.getVariableValue("R8"));
  assertEquals(BigInteger.valueOf(0x00000000L),interpreter.getVariableValue("R9"));
  assertEquals(BigInteger.valueOf(0x000095A0L),interpreter.getVariableValue("R10"));
  assertEquals(BigInteger.valueOf(0x00000000L),interpreter.getVariableValue("R11"));
  assertEquals(BigInteger.valueOf(0x000003E0L),interpreter.getVariableValue(("SP")));
  assertEquals(BigInteger.ONE,interpreter.getVariableValue("C"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("N"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("Z"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("V"));
  assertEquals(BigInteger.ZERO,interpreter.getVariableValue("Q"));
  assertEquals(BigInteger.valueOf(0x00008124L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003E0L)));
  assertEquals(BigInteger.valueOf(0x000096A0L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003E4L)));
  assertEquals(BigInteger.valueOf(0x00000000L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003E8L)));
  assertEquals(BigInteger.valueOf(0x00000000L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003ECL)));
  assertEquals(BigInteger.valueOf(0x00000000L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003F0L)));
  assertEquals(BigInteger.valueOf(0x00000000L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003F4L)));
  assertEquals(BigInteger.valueOf(0x000095A0L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003F8L)));
  assertEquals(BigInteger.valueOf(0x00000000L),BigInteger.valueOf(interpreter.readMemoryDword(0x000003FCL)));
  assertEquals(BigInteger.valueOf(8 * 4),BigInteger.valueOf(interpreter.getMemorySize()));
  assertEquals(19,TestHelpers.filterNativeRegisters(interpreter.getDefinedRegisters()).size());
  System.out.println(instructions);
}
