{
  final ConditionParser.bxorExpression_return retval=new ConditionParser.bxorExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token B_XOR16=null;
  ConditionParser.bandExpression_return bandExpression15=null;
  ConditionParser.bandExpression_return bandExpression17=null;
  Object B_XOR16_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_bandExpression_in_bxorExpression431);
      bandExpression15=bandExpression();
      state._fsp--;
      adaptor.addChild(root_0,bandExpression15.getTree());
      loop4:       do {
        int alt4=2;
        final int LA4_0=input.LA(1);
        if ((LA4_0 == B_XOR)) {
          alt4=1;
        }
switch (alt4) {
case 1:
{
            B_XOR16=(Token)match(input,B_XOR,FOLLOW_B_XOR_in_bxorExpression434);
            B_XOR16_tree=(Object)adaptor.create(B_XOR16);
            root_0=(Object)adaptor.becomeRoot(B_XOR16_tree,root_0);
            pushFollow(FOLLOW_bandExpression_in_bxorExpression437);
            bandExpression17=bandExpression();
            state._fsp--;
            adaptor.addChild(root_0,bandExpression17.getTree());
          }
        break;
default :
      break loop4;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (final RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
