{
  final ConditionParser.andExpression_return retval=new ConditionParser.andExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token AND7=null;
  ConditionParser.condition_return condition6=null;
  ConditionParser.condition_return condition8=null;
  Object AND7_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_condition_in_andExpression356);
      condition6=condition();
      state._fsp--;
      adaptor.addChild(root_0,condition6.getTree());
      loop2:       do {
        int alt2=2;
        final int LA2_0=input.LA(1);
        if ((LA2_0 == AND)) {
          alt2=1;
        }
switch (alt2) {
case 1:
{
            AND7=(Token)match(input,AND,FOLLOW_AND_in_andExpression359);
            AND7_tree=(Object)adaptor.create(AND7);
            root_0=(Object)adaptor.becomeRoot(AND7_tree,root_0);
            pushFollow(FOLLOW_condition_in_andExpression362);
            condition8=condition();
            state._fsp--;
            adaptor.addChild(root_0,condition8.getTree());
          }
        break;
default :
      break loop2;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (final RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
