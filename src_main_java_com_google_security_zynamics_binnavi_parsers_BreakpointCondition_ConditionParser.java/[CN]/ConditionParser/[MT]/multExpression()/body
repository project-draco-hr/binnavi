{
  final ConditionParser.multExpression_return retval=new ConditionParser.multExpression_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token set28=null;
  ConditionParser.primaryExpression_return primaryExpression27=null;
  ConditionParser.primaryExpression_return primaryExpression29=null;
  final Object set28_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_primaryExpression_in_multExpression531);
      primaryExpression27=primaryExpression();
      state._fsp--;
      adaptor.addChild(root_0,primaryExpression27.getTree());
      loop8:       do {
        int alt8=2;
        final int LA8_0=input.LA(1);
        if (((LA8_0 >= MULT && LA8_0 <= MOD))) {
          alt8=1;
        }
switch (alt8) {
case 1:
{
            set28=(Token)input.LT(1);
            set28=(Token)input.LT(1);
            if ((input.LA(1) >= MULT && input.LA(1) <= MOD)) {
              input.consume();
              root_0=(Object)adaptor.becomeRoot((Object)adaptor.create(set28),root_0);
              state.errorRecovery=false;
            }
 else {
              final MismatchedSetException mse=new MismatchedSetException(null,input);
              throw mse;
            }
            pushFollow(FOLLOW_primaryExpression_in_multExpression543);
            primaryExpression29=primaryExpression();
            state._fsp--;
            adaptor.addChild(root_0,primaryExpression29.getTree());
          }
        break;
default :
      break loop8;
  }
}
 while (true);
}
retval.stop=input.LT(-1);
retval.tree=(Object)adaptor.rulePostProcessing(root_0);
adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
}
 catch (final RecognitionException re) {
reportError(re);
recover(input,re);
retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
}
 finally {
}
return retval;
}
