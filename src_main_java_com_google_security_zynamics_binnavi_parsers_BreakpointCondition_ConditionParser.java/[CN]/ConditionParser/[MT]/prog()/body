{
  final ConditionParser.prog_return retval=new ConditionParser.prog_return();
  retval.start=input.LT(1);
  Object root_0=null;
  Token EOF2=null;
  ConditionParser.conditionChain_return conditionChain1=null;
  Object EOF2_tree=null;
  try {
{
      root_0=(Object)adaptor.nil();
      pushFollow(FOLLOW_conditionChain_in_prog323);
      conditionChain1=conditionChain();
      state._fsp--;
      adaptor.addChild(root_0,conditionChain1.getTree());
      EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_prog325);
      EOF2_tree=(Object)adaptor.create(EOF2);
      adaptor.addChild(root_0,EOF2_tree);
    }
    retval.stop=input.LT(-1);
    retval.tree=(Object)adaptor.rulePostProcessing(root_0);
    adaptor.setTokenBoundaries(retval.tree,retval.start,retval.stop);
  }
 catch (  final RecognitionException re) {
    reportError(re);
    recover(input,re);
    retval.tree=(Object)adaptor.errorNode(input,retval.start,input.LT(-1),re);
  }
 finally {
  }
  return retval;
}
