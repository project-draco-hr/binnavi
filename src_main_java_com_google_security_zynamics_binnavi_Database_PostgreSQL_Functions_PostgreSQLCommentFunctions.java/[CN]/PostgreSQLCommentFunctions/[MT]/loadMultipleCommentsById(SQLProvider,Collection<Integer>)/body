{
  Preconditions.checkNotNull(provider,"IE00480: provider argument can not be null");
  Preconditions.checkNotNull(commentIds,"IE00481: commentIds argument can not be null");
  final String query="SELECT * FROM get_all_comment_ancestors_multiple(?)";
  final HashMap<Integer,IComment> commentIdToComment=new HashMap<>();
  final Object[] commentIdsArray=commentIds.toArray();
  final HashMap<Integer,ArrayList<IComment>> commentIdToComments=new HashMap<>();
  try (PreparedStatement statement=provider.getConnection().getConnection().prepareCall(query)){
    statement.setArray(1,provider.getConnection().getConnection().createArrayOf("int4",commentIdsArray));
    final ResultSet resultSet=statement.executeQuery();
    while (resultSet.next()) {
      final int rootComment=resultSet.getInt("commentid");
      resultSet.getInt("level");
      final int commentId=resultSet.getInt("id");
      final int parentId=resultSet.getInt("parent_id");
      final int userId=resultSet.getInt("user_id");
      final String commentText=resultSet.getString("comment");
      final IUser user=CUserManager.get(provider).getUserById(userId);
      final CComment comment=new CComment(commentId,user,commentIdToComment.get(parentId),commentText);
      commentIdToComment.put(commentId,comment);
      if (commentIdToComments.containsKey(rootComment)) {
        commentIdToComments.get(rootComment).add(comment);
      }
 else {
        commentIdToComments.put(rootComment,Lists.<IComment>newArrayList(comment));
      }
    }
  }
 catch (  final SQLException exception) {
    throw new CouldntLoadDataException(exception);
  }
  return commentIdToComments;
}
