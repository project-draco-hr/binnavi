{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final String targetRegister=(registerOperand1.getValue());
  final String sourceRegister1=(registerOperand2.getValue());
  final String sourceRegister2=(registerOperand3.getValue());
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize wd=OperandSize.WORD;
  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();
  final String andedRm=environment.getNextVariableString();
  final String shiftedRn=environment.getNextVariableString();
  final String tmpHighResult=environment.getNextVariableString();
  final String andedRn=environment.getNextVariableString();
  final String shiftedRm=environment.getNextVariableString();
  final String tmpLowResult=environment.getNextVariableString();
  final String highResult=environment.getNextVariableString();
  final String lowResult=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister1,dw,String.valueOf(-16),dw,shiftedRn));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,sourceRegister2,dw,String.valueOf(0xFFFFL),dw,andedRm));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,shiftedRn,dw,andedRm,dw,tmpHighResult));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpHighResult,dw,String.valueOf(0xFFFFL),dw,highResult));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,sourceRegister1,dw,String.valueOf(0xFFFFL),dw,andedRn));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister2,dw,String.valueOf(-16),dw,shiftedRm));
  instructions.add(ReilHelpers.createSub(baseOffset++,dw,andedRn,dw,shiftedRm,dw,tmpLowResult));
  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpLowResult,dw,String.valueOf(0xFFFFL),dw,lowResult));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,highResult,dw,String.valueOf(16),dw,tmpVar1));
  instructions.add(ReilHelpers.createOr(baseOffset++,dw,tmpVar1,dw,lowResult,dw,targetRegister));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpHighResult,wd,String.valueOf(-16L),bt,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar2,bt,String.valueOf(1L),bt,"CPSR_GE_2"));
  instructions.add(ReilHelpers.createStr(baseOffset++,bt,"CPSR_GE_2",bt,"CPSR_GE_3"));
  instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpHighResult,wd,String.valueOf(-15L),bt,tmpVar3));
  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar3,bt,String.valueOf(1L),bt,"CPSR_GE_0"));
  instructions.add(ReilHelpers.createStr(baseOffset++,bt,"CPSR_GE_0",bt,"CPSR_GE_1"));
}
