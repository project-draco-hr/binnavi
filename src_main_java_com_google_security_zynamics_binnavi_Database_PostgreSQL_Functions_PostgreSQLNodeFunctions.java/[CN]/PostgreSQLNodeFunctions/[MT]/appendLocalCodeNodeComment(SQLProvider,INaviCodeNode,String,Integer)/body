{
  Preconditions.checkNotNull(provider,"IE02453: provider argument can not be null");
  Preconditions.checkNotNull(codeNode,"IE02454: codeNode argument can not be null");
  Preconditions.checkNotNull(commentText,"IE02455: commentText argument can not be null");
  Preconditions.checkNotNull(userId,"IE02456: userId argument can not be null");
  final Connection connection=provider.getConnection().getConnection();
  final String function="{ ? = call append_local_code_node_comment( ?, ?, ?, ?) }";
  Integer moduleId=null;
  final int nodeId=codeNode.getId();
  try {
    moduleId=codeNode.getParentFunction().getModule().getConfiguration().getId();
  }
 catch (  final MaybeNullException exception) {
    throw new CouldntSaveDataException(exception);
  }
  try {
    final CallableStatement appendCommentFunction=connection.prepareCall(function);
    try {
      appendCommentFunction.registerOutParameter(1,Types.INTEGER);
      appendCommentFunction.setInt(2,moduleId);
      appendCommentFunction.setInt(3,nodeId);
      appendCommentFunction.setInt(4,userId);
      appendCommentFunction.setString(5,commentText);
      appendCommentFunction.execute();
      final int commentId=appendCommentFunction.getInt(1);
      if (appendCommentFunction.wasNull()) {
        throw new CouldntSaveDataException("E00037: ");
      }
      return commentId;
    }
  finally {
      appendCommentFunction.close();
    }
  }
 catch (  final SQLException exception) {
    throw new CouldntSaveDataException(exception);
  }
}
