{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,mnemonic);
  final OperandSize qw=OperandSize.QWORD;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize bt=OperandSize.BYTE;
  final String tmpCountRegister=ctrDecrement ? environment.getNextVariableString() : null;
  final String branchCondition=environment.getNextVariableString();
  final String conditionConditionRegister=environment.getNextVariableString();
  final String conditionCountRegister=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String[] meta=setLinkRegister ? new String[]{"isCall","true"} : new String[0];
  if (setLinkRegister) {
    instructions.add(ReilHelpers.createStr(baseOffset++,OperandSize.DWORD,String.valueOf(instruction.getAddress().toLong() + 4),OperandSize.DWORD,Helpers.LINK_REGISTER));
  }
  if (isUnconditional) {
    instructions.add(ReilHelpers.createJcc(baseOffset++,bt,String.valueOf(1L),dw,addressOperand,meta));
  }
 else {
    if (ctrDecrement) {
      instructions.add(ReilHelpers.createSub(baseOffset++,dw,Helpers.COUNT_REGISTER,bt,String.valueOf(1L),qw,tmpCountRegister));
      instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpCountRegister,dw,String.valueOf(0xFFFFFFFFL),dw,Helpers.COUNT_REGISTER));
    }
    if (ctrDecrement & !crCheck) {
      if (ctrZero) {
        instructions.add(ReilHelpers.createBisz(baseOffset++,dw,Helpers.COUNT_REGISTER,bt,branchCondition));
        instructions.add(ReilHelpers.createJcc(baseOffset++,bt,branchCondition,dw,addressOperand,meta));
      }
 else {
        instructions.add(ReilHelpers.createJcc(baseOffset++,dw,Helpers.COUNT_REGISTER,dw,addressOperand,meta));
      }
    }
 else     if (ctrDecrement & crCheck) {
      if (ctrZero) {
        instructions.add(ReilHelpers.createBisz(baseOffset++,dw,Helpers.COUNT_REGISTER,bt,conditionCountRegister));
      }
 else {
        instructions.add(ReilHelpers.createBisz(baseOffset++,dw,Helpers.COUNT_REGISTER,bt,tmpVar1));
        instructions.add(ReilHelpers.createXor(baseOffset++,bt,tmpVar1,bt,String.valueOf(1L),bt,conditionCountRegister));
      }
      if (crZero) {
        instructions.add(ReilHelpers.createBisz(baseOffset++,bt,Helpers.getCRBit(Integer.valueOf(BIOperand)),bt,conditionConditionRegister));
      }
 else {
        instructions.add(ReilHelpers.createBisz(baseOffset++,bt,Helpers.getCRBit(Integer.valueOf(BIOperand)),bt,tmpVar2));
        instructions.add(ReilHelpers.createXor(baseOffset++,bt,tmpVar2,bt,String.valueOf(1L),bt,conditionConditionRegister));
      }
      instructions.add(ReilHelpers.createAnd(baseOffset++,bt,conditionConditionRegister,bt,conditionCountRegister,bt,branchCondition));
      instructions.add(ReilHelpers.createJcc(baseOffset++,bt,branchCondition,dw,addressOperand,meta));
    }
 else     if (!ctrDecrement & crCheck) {
      if (crZero) {
        instructions.add(ReilHelpers.createBisz(baseOffset++,bt,Helpers.getCRBit(Integer.valueOf(BIOperand)),bt,branchCondition));
        instructions.add(ReilHelpers.createJcc(baseOffset++,bt,branchCondition,dw,addressOperand,meta));
      }
 else {
        instructions.add(ReilHelpers.createJcc(baseOffset++,bt,Helpers.getCRBit(Integer.valueOf(BIOperand)),dw,addressOperand,meta));
      }
    }
 else     if (!ctrDecrement & !crCheck) {
      instructions.add(ReilHelpers.createJcc(baseOffset++,bt,BIOperand,dw,addressOperand,meta));
    }
  }
}
