{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final String sourceRegister1=(registerOperand1.getValue());
  final String sourceRegister2=(registerOperand2.getValue());
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  long baseOffset=(instruction.getAddress().toLong() * 0x100) + instructions.size();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  final String tmpVar4=environment.getNextVariableString();
  instructions.add(ReilHelpers.createSub(baseOffset++,dw,sourceRegister1,dw,sourceRegister2,qw,tmpVar1));
  instructions.add(ReilHelpers.createBsh(baseOffset++,qw,tmpVar1,dw,String.valueOf(-31L),bt,tmpVar2));
  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar2,bt,String.valueOf(1L),bt,"N"));
  instructions.add(ReilHelpers.createBisz(baseOffset++,qw,tmpVar1,bt,"Z"));
  instructions.add(ReilHelpers.createBsh(baseOffset++,qw,tmpVar1,dw,String.valueOf(-32L),bt,tmpVar3));
  instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar3,bt,String.valueOf(1L),bt,tmpVar4));
  instructions.add(ReilHelpers.createBisz(baseOffset++,bt,tmpVar4,bt,"C"));
  Helpers.subOverflow(baseOffset,environment,instruction,instructions,dw,sourceRegister1,dw,sourceRegister2,qw,tmpVar1,"V",32);
}
