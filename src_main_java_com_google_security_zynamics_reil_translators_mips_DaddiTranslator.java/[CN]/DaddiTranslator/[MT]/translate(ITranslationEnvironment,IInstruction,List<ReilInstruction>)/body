{
  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"daddi");
  final String targetRegister=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getValue();
  final String sourceRegister=instruction.getOperands().get(1).getRootNode().getChildren().get(0).getValue();
  final String sourceImmediate=instruction.getOperands().get(2).getRootNode().getChildren().get(0).getValue();
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  final OperandSize ow=OperandSize.OWORD;
  final long baseOffset=ReilHelpers.toReilAddress(instruction.getAddress()).toLong();
  long offset=baseOffset;
  final String temporaryResult=environment.getNextVariableString();
  final String bit63=environment.getNextVariableString();
  final String bit64=environment.getNextVariableString();
  final String jumpCondition=environment.getNextVariableString();
  final String sourceImmediateSignExtended=SignExtendGenerator.extend16BitTo64(offset,environment,sourceImmediate,instructions);
  instructions.add(ReilHelpers.createAdd(offset++,qw,sourceRegister,qw,sourceImmediateSignExtended,ow,temporaryResult));
  instructions.add(ReilHelpers.createBsh(offset++,ow,temporaryResult,dw,String.valueOf(-63L),bt,bit63));
  instructions.add(ReilHelpers.createBsh(offset++,ow,temporaryResult,dw,String.valueOf(-64L),bt,bit64));
  instructions.add(ReilHelpers.createXor(offset++,bt,bit63,bt,bit64,bt,jumpCondition));
  final String jmpGoal=String.format("%d.%d",instruction.getAddress().toLong(),instructions.size() + 2);
  instructions.add(ReilHelpers.createJcc(offset++,bt,jumpCondition,dw,jmpGoal));
  instructions.add(ReilHelpers.createAnd(offset++,ow,temporaryResult,qw,String.valueOf(0xFFFFFFFFFFFFFFFFL),qw,targetRegister));
  instructions.add(ReilHelpers.createNop(offset));
}
