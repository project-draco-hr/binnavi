{
  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand3=instruction.getOperands().get(2).getRootNode().getChildren().get(0);
  final IOperandTreeNode registerOperand4=instruction.getOperands().get(3).getRootNode().getChildren().get(0);
  final String sourceRegister1=(registerOperand1.getValue());
  final String sourceRegister2=(registerOperand2.getValue());
  final String sourceRegister3=(registerOperand3.getValue());
  final String sourceRegister4=(registerOperand4.getValue());
  final OperandSize bt=OperandSize.BYTE;
  final OperandSize wd=OperandSize.WORD;
  final OperandSize dw=OperandSize.DWORD;
  final OperandSize qw=OperandSize.QWORD;
  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  final String isNotOverflowed=environment.getNextVariableString();
  final String operand1=environment.getNextVariableString();
  final String operand2=environment.getNextVariableString();
  final String tmpVar1=environment.getNextVariableString();
  final String tmpVar2=environment.getNextVariableString();
  final String tmpVar3=environment.getNextVariableString();
  final String tmpVar4=environment.getNextVariableString();
  final String tmpVar5=environment.getNextVariableString();
  if (instruction.getMnemonic().contains("BB")) {
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister2,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister3,dw,operand2,16);
  }
 else   if (instruction.getMnemonic().contains("BT")) {
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister2,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister3,wd,String.valueOf(-16L),dw,tmpVar1));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar1,dw,operand2,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  }
 else   if (instruction.getMnemonic().contains("TB")) {
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister2,wd,String.valueOf(-16L),dw,tmpVar1));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar1,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,sourceRegister3,dw,operand2,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  }
 else   if (instruction.getMnemonic().contains("TB")) {
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister2,wd,String.valueOf(-16L),dw,tmpVar1));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar1,dw,operand1,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,sourceRegister3,wd,String.valueOf(-16L),dw,tmpVar2));
    Helpers.signExtend(baseOffset,environment,instruction,instructions,dw,tmpVar2,dw,operand2,16);
    baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);
  }
  instructions.add(ReilHelpers.createMul(baseOffset++,dw,operand1,dw,operand2,qw,tmpVar3));
  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,sourceRegister4,qw,tmpVar3,qw,tmpVar4));
  instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,String.valueOf(0xFFFFFFFFL),dw,sourceRegister1));
  instructions.add(ReilHelpers.createBsh(baseOffset++,qw,tmpVar4,wd,String.valueOf(-32),dw,tmpVar5));
  instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar5,bt,isNotOverflowed));
  instructions.add(ReilHelpers.createBisz(baseOffset++,bt,isNotOverflowed,bt,"Q"));
}
